# Caddyfile for Azure Web Content Share Frontend
# Secure configuration with ModSecurity-like protection, proper logging and headers
{
	# Global options
	admin off
	persist_config off

	# Security settings
	servers {
		protocols h1 h2 h3
	}
}

# Main server block
:8080 {
	# Apply matchers for API calls from frontend
	@api_calls {
		path /api/*
	}

	# Block common attack patterns  
	@sql_injection {
		path_regexp (?i)(union|select|insert|delete|drop|create|alter|exec|script)
	}

	@xss_attempts {
		path_regexp (?i)(<script|javascript:|data:text/html|vbscript:|onload=|onerror=)
	}

	@path_traversal {
		path_regexp (\.\./)|(\.\.\\)|(%2e%2e%2f)|(%2e%2e%5c)
	}

	@suspicious_files {
		path_regexp \.(php|asp|aspx|jsp|cgi|pl|py|rb|sh|bat|cmd)$
	}

	# Block malicious requests
	handle @sql_injection {
		respond "Access Denied: SQL Injection Detected" 403
	}

	handle @xss_attempts {
		respond "Access Denied: XSS Detected" 403
	}

	handle @path_traversal {
		respond "Access Denied: Path Traversal Detected" 403
	}

	handle @suspicious_files {
		respond "Access Denied: Suspicious File Extension" 403
	}

	handle @api_calls {
		# Proxy API calls to the API Gateway instead of direct API
		reverse_proxy {env.API_GATEWAY_URL} {
			header_up Host {upstream_hostport}
			header_up X-Real-IP {remote_host}
		}
	}

	# Security processing for all requests (after API calls are handled)
	# Enable gzip compression
	encode {
		gzip 6
		minimum_length 1024
	}

	# Root directory for static files  
	root * /usr/share/caddy

	# Security headers (enhanced)
	header {
		# Prevent clickjacking
		X-Frame-Options "SAMEORIGIN"

		# Prevent MIME type sniffing
		X-Content-Type-Options "nosniff"

		# Enable XSS protection
		X-XSS-Protection "1; mode=block"

		# Referrer policy for privacy
		Referrer-Policy "strict-origin-when-cross-origin"

		# Enhanced Content Security Policy
		Content-Security-Policy "default-src 'self'; script-src 'self' 'unsafe-inline' 'unsafe-eval'; style-src 'self' 'unsafe-inline'; img-src 'self' data: https:; font-src 'self' data:; connect-src 'self' https://login.microsoftonline.com https://graph.microsoft.com {env.API_GATEWAY_URL}; frame-ancestors 'self'; base-uri 'self'; form-action 'self';"

		# Remove server information
		-Server

		# HSTS for HTTPS (if behind HTTPS termination)
		Strict-Transport-Security "max-age=31536000; includeSubDomains; preload"

		# Additional security headers
		X-Permitted-Cross-Domain-Policies "none"
		Cross-Origin-Embedder-Policy "credentialless"
		Cross-Origin-Opener-Policy "same-origin-allow-popups"
		Cross-Origin-Resource-Policy "same-site"

		# Feature policy / permissions policy
		Permissions-Policy "camera=(), microphone=(), geolocation=(), interest-cohort=()"
	}

	# Health check endpoint
	respond /health 200 {
		body "healthy"
		close
	}

	# Cache static assets
	@static {
		path *.js *.css *.png *.jpg *.jpeg *.gif *.ico *.svg *.webp *.woff *.woff2 *.ttf *.eot
	}

	header @static {
		Cache-Control "public, max-age=31536000, immutable"
	}

	# SPA routing - serve index.html for all non-file requests
	try_files {path} {path}/ /index.html

	# Serve static files
	file_server

	# Structured access logging
	log {
		output file /var/log/caddy/access.log {
			roll_size 100MB
			roll_keep 5
			roll_keep_for 168h
		}
		format json {
			message_key "message"
			level_key "level"
			time_key "timestamp"
			time_format "2006-01-02T15:04:05.000Z07:00"
		}
		level INFO
	}

	# Error handling
	handle_errors {
		@404 {
			expression {http.error.status_code} == 404
		}

		@5xx {
			expression {http.error.status_code} >= 500
		}

		# Serve custom error pages if they exist, otherwise use defaults
		handle @404 {
			rewrite * /index.html
			file_server
		}

		handle @5xx {
			respond "Server Error" 500
		}
	}
}
