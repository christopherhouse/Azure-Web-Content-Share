name: Build and Deploy Applications

on:
  push:
    branches:
      - main
    paths:
      - 'src/**'
  pull_request:
    branches:
      - main
    paths:
      - 'src/**'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Select environment to deploy'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - prod

permissions:
  contents: read
  packages: write
  actions: read
  id-token: write

env:
  REGISTRY: ${{ secrets.AZURE_CONTAINER_REGISTRY_LOGIN_SERVER }}
  API_IMAGE_NAME: azure-web-content-share-api
  FRONTEND_IMAGE_NAME: azure-web-content-share-frontend

jobs:
  build:
    name: Build Applications
    runs-on: ubuntu-latest
    outputs:
      api-image: ${{ steps.meta-api.outputs.tags }}
      frontend-image: ${{ steps.meta-frontend.outputs.tags }}
      build-id: ${{ github.run_number }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Azure login using OIDC
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Login to Azure Container Registry
        run: |
          az acr login --name ${{ secrets.AZURE_CONTAINER_REGISTRY_NAME }}

      - name: Extract metadata for API
        id: meta-api
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.API_IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=raw,value=latest,enable={{is_default_branch}}
            type=raw,value=${{ github.run_number }}

      - name: Extract metadata for Frontend
        id: meta-frontend
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.FRONTEND_IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=raw,value=latest,enable={{is_default_branch}}
            type=raw,value=${{ github.run_number }}

      - name: Build and test API
        run: |
          cd src/Api
          dotnet restore
          dotnet build --configuration Release --no-restore
          dotnet test --configuration Release --no-build --verbosity normal

      - name: Build and test Frontend
        run: |
          cd src/Frontend
          npm ci
          npm run type-check
          npm run build

      - name: Build and push API image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./src/Api/Dockerfile
          push: true
          tags: ${{ steps.meta-api.outputs.tags }}
          labels: ${{ steps.meta-api.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build and push Frontend image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./src/Frontend/Dockerfile
          push: true
          tags: ${{ steps.meta-frontend.outputs.tags }}
          labels: ${{ steps.meta-frontend.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy-dev:
    name: Deploy to Development
    runs-on: ubuntu-latest
    needs: build
    if: (github.ref == 'refs/heads/main' && github.event_name == 'push') || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'dev')
    environment: 
      name: development
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Azure login using OIDC
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Deploy API to Container Apps
        run: |
          az containerapp update \
            --name ca-awcs-api-$(az deployment group show --resource-group rg-awcs-dev --name infra-dev-latest --query 'properties.outputs.uniqueResourceToken.value' -o tsv) \
            --resource-group rg-awcs-dev \
            --image ${{ env.REGISTRY }}/${{ env.API_IMAGE_NAME }}:${{ needs.build.outputs.build-id }}

      - name: Deploy Frontend to Container Apps
        run: |
          az containerapp update \
            --name ca-awcs-frontend-$(az deployment group show --resource-group rg-awcs-dev --name infra-dev-latest --query 'properties.outputs.uniqueResourceToken.value' -o tsv) \
            --resource-group rg-awcs-dev \
            --image ${{ env.REGISTRY }}/${{ env.FRONTEND_IMAGE_NAME }}:${{ needs.build.outputs.build-id }}

  deploy-prod:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'prod'
    environment: 
      name: production
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Azure login using OIDC
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Deploy API to Container Apps
        run: |
          az containerapp update \
            --name ca-awcs-api-$(az deployment group show --resource-group rg-awcs-prod --name infra-prod-latest --query 'properties.outputs.uniqueResourceToken.value' -o tsv) \
            --resource-group rg-awcs-prod \
            --image ${{ env.REGISTRY }}/${{ env.API_IMAGE_NAME }}:${{ needs.build.outputs.build-id }}

      - name: Deploy Frontend to Container Apps
        run: |
          az containerapp update \
            --name ca-awcs-frontend-$(az deployment group show --resource-group rg-awcs-prod --name infra-prod-latest --query 'properties.outputs.uniqueResource Token.value' -o tsv) \
            --resource-group rg-awcs-prod \
            --image ${{ env.REGISTRY }}/${{ env.FRONTEND_IMAGE_NAME }}:${{ needs.build.outputs.build-id }}