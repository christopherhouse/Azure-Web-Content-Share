name: Build and Deploy Applications

on:
  push:
    branches:
      - main
    paths:
      - 'src/**'
  pull_request:
    branches:
      - main
    paths:
      - 'src/**'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Select environment to deploy'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - prod

permissions:
  contents: read
  packages: write
  actions: read
  id-token: write

env:
  REGISTRY: ${{ secrets.AZURE_CONTAINER_REGISTRY_LOGIN_SERVER }}
  API_IMAGE_NAME: azure-web-content-share-api
  FRONTEND_IMAGE_NAME: azure-web-content-share-frontend

jobs:
  build:
    name: Build Applications
    runs-on: ubuntu-latest
    outputs:
      api-image: ${{ steps.meta-api.outputs.tags }}
      frontend-image: ${{ steps.meta-frontend.outputs.tags }}
      build-id: ${{ github.run_number }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Azure login using OIDC
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Login to Azure Container Registry
        run: |
          az acr login --name ${{ secrets.AZURE_CONTAINER_REGISTRY_NAME }}

      - name: Extract metadata for API
        id: meta-api
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.API_IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=raw,value=latest,enable={{is_default_branch}}
            type=raw,value=${{ github.run_number }}

      - name: Extract metadata for Frontend
        id: meta-frontend
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.FRONTEND_IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=raw,value=latest,enable={{is_default_branch}}
            type=raw,value=${{ github.run_number }}

      - name: Build and test API
        run: |
          cd src/Api
          dotnet restore
          dotnet build --configuration Release --no-restore
          dotnet test --configuration Release --no-build --verbosity normal

      - name: Build and test Frontend
        run: |
          cd src/Frontend
          npm ci
          npm run type-check
          npm run build

      - name: Build and push API image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./src/Api/Dockerfile
          push: true
          tags: ${{ steps.meta-api.outputs.tags }}
          labels: ${{ steps.meta-api.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build and push Frontend image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./src/Frontend/Dockerfile
          push: true
          tags: ${{ steps.meta-frontend.outputs.tags }}
          labels: ${{ steps.meta-frontend.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy-dev:
    name: Deploy to Development
    runs-on: ubuntu-latest
    needs: build
    if: (github.ref == 'refs/heads/main' && github.event_name == 'push') || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'dev')
    environment: 
      name: development
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Azure login using OIDC
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Deploy API to Container Apps
        run: |
          # Get deployment outputs
          UNIQUE_TOKEN=$(az deployment group show --resource-group rg-awcs-dev --name infra-dev-latest --query 'properties.outputs.uniqueResourceToken.value' -o tsv)
          CONTAINER_ENV_NAME=$(az deployment group show --resource-group rg-awcs-dev --name infra-dev-latest --query 'properties.outputs.containerAppsEnvironmentName.value' -o tsv)
          UAMI_ID=$(az deployment group show --resource-group rg-awcs-dev --name infra-dev-latest --query 'properties.outputs.userAssignedManagedIdentityId.value' -o tsv)
          ACR_LOGIN_SERVER=$(az deployment group show --resource-group rg-awcs-dev --name infra-dev-latest --query 'properties.outputs.containerRegistryLoginServer.value' -o tsv)
          APP_INSIGHTS_CONN=$(az deployment group show --resource-group rg-awcs-dev --name infra-dev-latest --query 'properties.outputs.applicationInsightsConnectionString.value' -o tsv)
          COSMOS_ENDPOINT=$(az deployment group show --resource-group rg-awcs-dev --name infra-dev-latest --query 'properties.outputs.cosmosDbEndpoint.value' -o tsv)
          STORAGE_ENDPOINT=$(az deployment group show --resource-group rg-awcs-dev --name infra-dev-latest --query 'properties.outputs.storageAccountBlobEndpoint.value' -o tsv)
          KEYVAULT_URI=$(az deployment group show --resource-group rg-awcs-dev --name infra-dev-latest --query 'properties.outputs.keyVaultUri.value' -o tsv)
          
          # Check if container app already exists
          if az containerapp show --name ca-awcs-api-${UNIQUE_TOKEN} --resource-group rg-awcs-dev > /dev/null 2>&1; then
            echo "API Container App already exists, updating..."
            az containerapp update \
              --name ca-awcs-api-${UNIQUE_TOKEN} \
              --resource-group rg-awcs-dev \
              --image ${ACR_LOGIN_SERVER}/${{ env.API_IMAGE_NAME }}:${{ needs.build.outputs.build-id }}
          else
            echo "Creating API Container App..."
            az containerapp create \
              --name ca-awcs-api-${UNIQUE_TOKEN} \
              --resource-group rg-awcs-dev \
              --environment ${CONTAINER_ENV_NAME} \
              --image ${ACR_LOGIN_SERVER}/${{ env.API_IMAGE_NAME }}:${{ needs.build.outputs.build-id }} \
              --user-assigned ${UAMI_ID} \
              --registry-identity ${UAMI_ID} \
              --registry-server ${ACR_LOGIN_SERVER} \
              --target-port 8080 \
              --ingress external \
              --min-replicas 0 \
              --max-replicas 10 \
              --cpu 0.25 \
              --memory 0.5Gi \
              --env-vars \
                ASPNETCORE_ENVIRONMENT=Production \
                APPLICATIONINSIGHTS_CONNECTION_STRING="${APP_INSIGHTS_CONN}" \
                Azure__Storage__BlobEndpoint="${STORAGE_ENDPOINT}" \
                Azure__CosmosDb__Endpoint="${COSMOS_ENDPOINT}" \
                Azure__KeyVault__Uri="${KEYVAULT_URI}"
          fi

      - name: Deploy Frontend to Container Apps
        run: |
          # Get deployment outputs
          UNIQUE_TOKEN=$(az deployment group show --resource-group rg-awcs-dev --name infra-dev-latest --query 'properties.outputs.uniqueResourceToken.value' -o tsv)
          CONTAINER_ENV_NAME=$(az deployment group show --resource-group rg-awcs-dev --name infra-dev-latest --query 'properties.outputs.containerAppsEnvironmentName.value' -o tsv)
          UAMI_ID=$(az deployment group show --resource-group rg-awcs-dev --name infra-dev-latest --query 'properties.outputs.userAssignedManagedIdentityId.value' -o tsv)
          ACR_LOGIN_SERVER=$(az deployment group show --resource-group rg-awcs-dev --name infra-dev-latest --query 'properties.outputs.containerRegistryLoginServer.value' -o tsv)
          
          # Get API URL for frontend environment variable
          API_URL="https://ca-awcs-api-${UNIQUE_TOKEN}.$(az containerapp env show --name ${CONTAINER_ENV_NAME} --resource-group rg-awcs-dev --query 'properties.defaultDomain' -o tsv)"
          
          # Check if container app already exists
          if az containerapp show --name ca-awcs-frontend-${UNIQUE_TOKEN} --resource-group rg-awcs-dev > /dev/null 2>&1; then
            echo "Frontend Container App already exists, updating..."
            az containerapp update \
              --name ca-awcs-frontend-${UNIQUE_TOKEN} \
              --resource-group rg-awcs-dev \
              --image ${ACR_LOGIN_SERVER}/${{ env.FRONTEND_IMAGE_NAME }}:${{ needs.build.outputs.build-id }}
          else
            echo "Creating Frontend Container App..."
            az containerapp create \
              --name ca-awcs-frontend-${UNIQUE_TOKEN} \
              --resource-group rg-awcs-dev \
              --environment ${CONTAINER_ENV_NAME} \
              --image ${ACR_LOGIN_SERVER}/${{ env.FRONTEND_IMAGE_NAME }}:${{ needs.build.outputs.build-id }} \
              --user-assigned ${UAMI_ID} \
              --registry-identity ${UAMI_ID} \
              --registry-server ${ACR_LOGIN_SERVER} \
              --target-port 8080 \
              --ingress external \
              --min-replicas 0 \
              --max-replicas 10 \
              --cpu 0.25 \
              --memory 0.5Gi \
              --env-vars \
                VITE_API_BASE_URL="${API_URL}"
          fi

  deploy-prod:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'prod'
    environment: 
      name: production
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Azure login using OIDC
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Deploy API to Container Apps
        run: |
          # Get deployment outputs
          UNIQUE_TOKEN=$(az deployment group show --resource-group rg-awcs-prod --name infra-prod-latest --query 'properties.outputs.uniqueResourceToken.value' -o tsv)
          CONTAINER_ENV_NAME=$(az deployment group show --resource-group rg-awcs-prod --name infra-prod-latest --query 'properties.outputs.containerAppsEnvironmentName.value' -o tsv)
          UAMI_ID=$(az deployment group show --resource-group rg-awcs-prod --name infra-prod-latest --query 'properties.outputs.userAssignedManagedIdentityId.value' -o tsv)
          ACR_LOGIN_SERVER=$(az deployment group show --resource-group rg-awcs-prod --name infra-prod-latest --query 'properties.outputs.containerRegistryLoginServer.value' -o tsv)
          APP_INSIGHTS_CONN=$(az deployment group show --resource-group rg-awcs-prod --name infra-prod-latest --query 'properties.outputs.applicationInsightsConnectionString.value' -o tsv)
          COSMOS_ENDPOINT=$(az deployment group show --resource-group rg-awcs-prod --name infra-prod-latest --query 'properties.outputs.cosmosDbEndpoint.value' -o tsv)
          STORAGE_ENDPOINT=$(az deployment group show --resource-group rg-awcs-prod --name infra-prod-latest --query 'properties.outputs.storageAccountBlobEndpoint.value' -o tsv)
          KEYVAULT_URI=$(az deployment group show --resource-group rg-awcs-prod --name infra-prod-latest --query 'properties.outputs.keyVaultUri.value' -o tsv)
          
          # Check if container app already exists
          if az containerapp show --name ca-awcs-api-${UNIQUE_TOKEN} --resource-group rg-awcs-prod > /dev/null 2>&1; then
            echo "API Container App already exists, updating..."
            az containerapp update \
              --name ca-awcs-api-${UNIQUE_TOKEN} \
              --resource-group rg-awcs-prod \
              --image ${ACR_LOGIN_SERVER}/${{ env.API_IMAGE_NAME }}:${{ needs.build.outputs.build-id }}
          else
            echo "Creating API Container App..."
            az containerapp create \
              --name ca-awcs-api-${UNIQUE_TOKEN} \
              --resource-group rg-awcs-prod \
              --environment ${CONTAINER_ENV_NAME} \
              --image ${ACR_LOGIN_SERVER}/${{ env.API_IMAGE_NAME }}:${{ needs.build.outputs.build-id }} \
              --user-assigned ${UAMI_ID} \
              --registry-identity ${UAMI_ID} \
              --registry-server ${ACR_LOGIN_SERVER} \
              --target-port 8080 \
              --ingress external \
              --min-replicas 0 \
              --max-replicas 10 \
              --cpu 0.25 \
              --memory 0.5Gi \
              --env-vars \
                ASPNETCORE_ENVIRONMENT=Production \
                APPLICATIONINSIGHTS_CONNECTION_STRING="${APP_INSIGHTS_CONN}" \
                Azure__Storage__BlobEndpoint="${STORAGE_ENDPOINT}" \
                Azure__CosmosDb__Endpoint="${COSMOS_ENDPOINT}" \
                Azure__KeyVault__Uri="${KEYVAULT_URI}"
          fi

      - name: Deploy Frontend to Container Apps
        run: |
          # Get deployment outputs
          UNIQUE_TOKEN=$(az deployment group show --resource-group rg-awcs-prod --name infra-prod-latest --query 'properties.outputs.uniqueResourceToken.value' -o tsv)
          CONTAINER_ENV_NAME=$(az deployment group show --resource-group rg-awcs-prod --name infra-prod-latest --query 'properties.outputs.containerAppsEnvironmentName.value' -o tsv)
          UAMI_ID=$(az deployment group show --resource-group rg-awcs-prod --name infra-prod-latest --query 'properties.outputs.userAssignedManagedIdentityId.value' -o tsv)
          ACR_LOGIN_SERVER=$(az deployment group show --resource-group rg-awcs-prod --name infra-prod-latest --query 'properties.outputs.containerRegistryLoginServer.value' -o tsv)
          
          # Get API URL for frontend environment variable
          API_URL="https://ca-awcs-api-${UNIQUE_TOKEN}.$(az containerapp env show --name ${CONTAINER_ENV_NAME} --resource-group rg-awcs-prod --query 'properties.defaultDomain' -o tsv)"
          
          # Check if container app already exists
          if az containerapp show --name ca-awcs-frontend-${UNIQUE_TOKEN} --resource-group rg-awcs-prod > /dev/null 2>&1; then
            echo "Frontend Container App already exists, updating..."
            az containerapp update \
              --name ca-awcs-frontend-${UNIQUE_TOKEN} \
              --resource-group rg-awcs-prod \
              --image ${ACR_LOGIN_SERVER}/${{ env.FRONTEND_IMAGE_NAME }}:${{ needs.build.outputs.build-id }}
          else
            echo "Creating Frontend Container App..."
            az containerapp create \
              --name ca-awcs-frontend-${UNIQUE_TOKEN} \
              --resource-group rg-awcs-prod \
              --environment ${CONTAINER_ENV_NAME} \
              --image ${ACR_LOGIN_SERVER}/${{ env.FRONTEND_IMAGE_NAME }}:${{ needs.build.outputs.build-id }} \
              --user-assigned ${UAMI_ID} \
              --registry-identity ${UAMI_ID} \
              --registry-server ${ACR_LOGIN_SERVER} \
              --target-port 8080 \
              --ingress external \
              --min-replicas 0 \
              --max-replicas 10 \
              --cpu 0.25 \
              --memory 0.5Gi \
              --env-vars \
                VITE_API_BASE_URL="${API_URL}"
          fi