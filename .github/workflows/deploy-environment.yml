name: Deploy to Environment

on:
  workflow_call:
    inputs:
      environment:
        description: 'Target environment (development or production)'
        required: true
        type: string
      api-image-tag:
        description: 'API container image tag'
        required: true
        type: string
      api-gateway-image-tag:
        description: 'API Gateway container image tag'
        required: true
        type: string
      frontend-image-tag:
        description: 'Frontend container image tag'
        required: true
        type: string
      jobs-image-tag:
        description: 'Jobs container image tag'
        required: true
        type: string
      skip-infrastructure:
        description: 'Skip infrastructure deployment'
        required: false
        type: boolean
        default: false
    outputs:
      frontend-url:
        description: 'Frontend application URL'
        value: ${{ jobs.deploy-applications.outputs.frontend-url }}
      api-gateway-url:
        description: 'API Gateway URL'
        value: ${{ jobs.deploy-applications.outputs.api-gateway-url }}

permissions:
  id-token: write
  contents: read
  packages: write

env:
  API_IMAGE_NAME: azure-web-content-share-api
  API_GATEWAY_IMAGE_NAME: azure-web-content-share-api-gateway
  FRONTEND_IMAGE_NAME: azure-web-content-share-frontend
  JOBS_IMAGE_NAME: azure-web-content-share-jobs

jobs:
  deploy-infrastructure:
    name: Deploy Infrastructure to ${{ inputs.environment }}
    runs-on: ubuntu-latest
    if: ${{ !inputs.skip-infrastructure }}
    environment: 
      name: ${{ inputs.environment }}
    outputs:
      container-registry: ${{ steps.deploy.outputs.containerRegistryLoginServer }}
      container-registry-name: ${{ steps.deploy.outputs.containerRegistryName }}
      unique-token: ${{ steps.deploy.outputs.uniqueResourceToken }}
      container-env-name: ${{ steps.deploy.outputs.containerAppsEnvironmentName }}
      uami-id: ${{ steps.deploy.outputs.userAssignedManagedIdentityId }}
      app-insights-conn: ${{ steps.deploy.outputs.applicationInsightsConnectionString }}
      cosmos-endpoint: ${{ steps.deploy.outputs.cosmosDbEndpoint }}
      storage-endpoint: ${{ steps.deploy.outputs.storageAccountBlobEndpoint }}
      keyvault-uri: ${{ steps.deploy.outputs.keyVaultUri }}
    
    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts-${{ github.run_number }}
          path: ./
        
      - name: Azure login using OIDC
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Deploy infrastructure
        id: deploy
        uses: azure/arm-deploy@v2
        with:
          scope: resourcegroup
          resourceGroupName: ${{ secrets.AZURE_RESOURCE_GROUP }}
          template: bicep/main.bicep
          parameters: bicep/parameters/${{ inputs.environment }}.bicepparam
          failOnStdErr: false
          deploymentName: 'infra-${{ inputs.environment }}-${{ github.run_number }}'
          
      - name: Create latest deployment alias
        uses: azure/arm-deploy@v2
        with:
          scope: resourcegroup
          resourceGroupName: ${{ secrets.AZURE_RESOURCE_GROUP }}
          template: bicep/main.bicep
          parameters: bicep/parameters/${{ inputs.environment }}.bicepparam
          failOnStdErr: false
          deploymentName: 'infra-${{ inputs.environment }}-latest'

      - name: Output deployment results
        run: |
          echo "‚úÖ Infrastructure deployed successfully to ${{ inputs.environment }}"
          echo "üèóÔ∏è Resource Group: ${{ secrets.AZURE_RESOURCE_GROUP }}"
          echo "üîß Container Apps Environment: ${{ steps.deploy.outputs.containerAppsEnvironmentName }}"
          echo "üì¶ Container Registry: ${{ steps.deploy.outputs.containerRegistryLoginServer }}"

      - name: Configure Cosmos DB RBAC for User Assigned Managed Identity
        run: |
          echo "üóÑÔ∏è Configuring Cosmos DB RBAC for User Assigned Managed Identity..."
          
          # Get the User Assigned Managed Identity principal ID
          UAMI_PRINCIPAL_ID=$(az identity show \
            --ids "${{ steps.deploy.outputs.userAssignedManagedIdentityId }}" \
            --query 'principalId' -o tsv)
          
          if [ -z "$UAMI_PRINCIPAL_ID" ]; then
            echo "‚ùå Failed to get User Assigned Managed Identity principal ID"
            exit 1
          fi
          
          echo "üìã UAMI Principal ID: $UAMI_PRINCIPAL_ID"
          
          # Get Cosmos DB account name from deployment outputs
          COSMOS_ACCOUNT_NAME=$(az deployment group show \
            --resource-group "${{ secrets.AZURE_RESOURCE_GROUP }}" \
            --name "infra-${{ inputs.environment }}-${{ github.run_number }}" \
            --query 'properties.outputs.cosmosDbAccountName.value' -o tsv)
          
          if [ -z "$COSMOS_ACCOUNT_NAME" ]; then
            echo "‚ùå Failed to get Cosmos DB account name"
            exit 1
          fi
          
          echo "üóÑÔ∏è Cosmos DB Account: $COSMOS_ACCOUNT_NAME"
          
          # Create scope for the Cosmos DB account
          COSMOS_SCOPE="/subscriptions/${{ secrets.AZURE_SUBSCRIPTION_ID }}/resourceGroups/${{ secrets.AZURE_RESOURCE_GROUP }}/providers/Microsoft.DocumentDB/databaseAccounts/${COSMOS_ACCOUNT_NAME}"
          
          # Assign Cosmos DB Built-in Data Contributor role to UAMI
          echo "üóÑÔ∏è Assigning Cosmos DB Built-in Data Contributor role to UAMI..."
          az cosmosdb sql role assignment create \
            --resource-group "${{ secrets.AZURE_RESOURCE_GROUP }}" \
            --account-name "$COSMOS_ACCOUNT_NAME" \
            --role-definition-id "00000000-0000-0000-0000-000000000002" \
            --principal-id "$UAMI_PRINCIPAL_ID" \
            --scope "$COSMOS_SCOPE"
          
          echo "‚úÖ Cosmos DB RBAC configuration completed"

      - name: Configure ACR Push permissions for GitHub Actions
        run: |
          echo "üì¶ Configuring ACR Push permissions for GitHub Actions Service Principal..."
          
          # Get resource group ID for scoping
          RG_ID=$(az group show \
            --name "${{ secrets.AZURE_RESOURCE_GROUP }}" \
            --query 'id' -o tsv)
          
          # Assign AcrPush role to GitHub Actions Service Principal
          echo "üîê Assigning AcrPush role to GitHub Actions Service Principal..."
          az role assignment create \
            --assignee "${{ secrets.AZURE_CLIENT_ID }}" \
            --role "8311e382-0749-4cb8-b61a-304f252e45ec" \
            --scope "$RG_ID" || echo "‚ö†Ô∏è Role assignment may already exist"
          
          echo "‚úÖ GitHub Actions ACR Push configuration completed"

  deploy-applications:
    name: Deploy Applications to ${{ inputs.environment }}
    runs-on: ubuntu-latest
    needs: [deploy-infrastructure]
    if: always() && !cancelled() && (needs.deploy-infrastructure.result == 'success' || needs.deploy-infrastructure.result == 'skipped')
    environment: 
      name: ${{ inputs.environment }}
    outputs:
      frontend-url: ${{ steps.urls.outputs.frontend-url }}
      api-gateway-url: ${{ steps.urls.outputs.api-gateway-url }}
    
    steps:
      - name: Azure login using OIDC
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Get deployment configuration and image tags
        id: config
        run: |
          if [ "${{ needs.deploy-infrastructure.result }}" == "success" ]; then
            # Use outputs from infrastructure deployment
            echo "üìã Using outputs from infrastructure deployment job"
            UNIQUE_TOKEN="${{ needs.deploy-infrastructure.outputs.unique-token }}"
            CONTAINER_ENV_NAME="${{ needs.deploy-infrastructure.outputs.container-env-name }}"
            UAMI_ID="${{ needs.deploy-infrastructure.outputs.uami-id }}"
            CONTAINER_REGISTRY="${{ needs.deploy-infrastructure.outputs.container-registry }}"
            APP_INSIGHTS_CONN="${{ needs.deploy-infrastructure.outputs.app-insights-conn }}"
            COSMOS_ENDPOINT="${{ needs.deploy-infrastructure.outputs.cosmos-endpoint }}"
            STORAGE_ENDPOINT="${{ needs.deploy-infrastructure.outputs.storage-endpoint }}"
            KEYVAULT_URI="${{ needs.deploy-infrastructure.outputs.keyvault-uri }}"
            
            # If critical values are empty from job outputs, try to get them directly from deployment
            if [ -z "$UAMI_ID" ] || [ "$UAMI_ID" = "null" ]; then
              echo "‚ö†Ô∏è UAMI ID is empty from job outputs, querying deployment directly..."
              DEPLOYMENT_NAME="infra-${{ inputs.environment }}-${{ github.run_number }}"
              RG_NAME="${{ secrets.AZURE_RESOURCE_GROUP }}"
              
              UAMI_ID=$(az deployment group show --resource-group $RG_NAME --name $DEPLOYMENT_NAME --query 'properties.outputs.userAssignedManagedIdentityId.value' -o tsv)
              echo "   Direct query UAMI ID: '$UAMI_ID'"
            fi
            
            if [ -z "$UNIQUE_TOKEN" ] || [ "$UNIQUE_TOKEN" = "null" ]; then
              echo "‚ö†Ô∏è Unique token is empty from job outputs, querying deployment directly..."
              DEPLOYMENT_NAME="infra-${{ inputs.environment }}-${{ github.run_number }}"
              RG_NAME="${{ secrets.AZURE_RESOURCE_GROUP }}"
              
              UNIQUE_TOKEN=$(az deployment group show --resource-group $RG_NAME --name $DEPLOYMENT_NAME --query 'properties.outputs.uniqueResourceToken.value' -o tsv)
              echo "   Direct query unique token: '$UNIQUE_TOKEN'"
            fi
            
            if [ -z "$CONTAINER_ENV_NAME" ] || [ "$CONTAINER_ENV_NAME" = "null" ]; then
              echo "‚ö†Ô∏è Container env name is empty from job outputs, querying deployment directly..."
              DEPLOYMENT_NAME="infra-${{ inputs.environment }}-${{ github.run_number }}"
              RG_NAME="${{ secrets.AZURE_RESOURCE_GROUP }}"
              
              CONTAINER_ENV_NAME=$(az deployment group show --resource-group $RG_NAME --name $DEPLOYMENT_NAME --query 'properties.outputs.containerAppsEnvironmentName.value' -o tsv)
              echo "   Direct query container env name: '$CONTAINER_ENV_NAME'"
            fi
            
            if [ -z "$CONTAINER_REGISTRY" ] || [ "$CONTAINER_REGISTRY" = "null" ]; then
              echo "‚ö†Ô∏è Container registry is empty from job outputs, querying deployment directly..."
              DEPLOYMENT_NAME="infra-${{ inputs.environment }}-${{ github.run_number }}"
              RG_NAME="${{ secrets.AZURE_RESOURCE_GROUP }}"
              
              CONTAINER_REGISTRY=$(az deployment group show --resource-group $RG_NAME --name $DEPLOYMENT_NAME --query 'properties.outputs.containerRegistryLoginServer.value' -o tsv)
              echo "   Direct query container registry: '$CONTAINER_REGISTRY'"
            fi
          else
            # Get from existing deployment (skip infra mode)
            DEPLOYMENT_NAME="infra-${{ inputs.environment }}-latest"
            RG_NAME="${{ secrets.AZURE_RESOURCE_GROUP }}"
            
            # Verify deployment exists
            if ! az deployment group show --resource-group $RG_NAME --name $DEPLOYMENT_NAME > /dev/null 2>&1; then
              echo "‚ùå ERROR: Deployment '$DEPLOYMENT_NAME' not found in resource group '$RG_NAME'"
              echo "üí° Either run with infrastructure deployment enabled or ensure infrastructure has been deployed previously"
              exit 1
            fi
            
            echo "üìã Getting configuration from existing deployment: $DEPLOYMENT_NAME"
            
            UNIQUE_TOKEN=$(az deployment group show --resource-group $RG_NAME --name $DEPLOYMENT_NAME --query 'properties.outputs.uniqueResourceToken.value' -o tsv)
            CONTAINER_ENV_NAME=$(az deployment group show --resource-group $RG_NAME --name $DEPLOYMENT_NAME --query 'properties.outputs.containerAppsEnvironmentName.value' -o tsv)
            UAMI_ID=$(az deployment group show --resource-group $RG_NAME --name $DEPLOYMENT_NAME --query 'properties.outputs.userAssignedManagedIdentityId.value' -o tsv)
            CONTAINER_REGISTRY=$(az deployment group show --resource-group $RG_NAME --name $DEPLOYMENT_NAME --query 'properties.outputs.containerRegistryLoginServer.value' -o tsv)
            APP_INSIGHTS_CONN=$(az deployment group show --resource-group $RG_NAME --name $DEPLOYMENT_NAME --query 'properties.outputs.applicationInsightsConnectionString.value' -o tsv)
            COSMOS_ENDPOINT=$(az deployment group show --resource-group $RG_NAME --name $DEPLOYMENT_NAME --query 'properties.outputs.cosmosDbEndpoint.value' -o tsv)
            STORAGE_ENDPOINT=$(az deployment group show --resource-group $RG_NAME --name $DEPLOYMENT_NAME --query 'properties.outputs.storageAccountBlobEndpoint.value' -o tsv)
            KEYVAULT_URI=$(az deployment group show --resource-group $RG_NAME --name $DEPLOYMENT_NAME --query 'properties.outputs.keyVaultUri.value' -o tsv)
          fi
          
          # Validate critical configuration values
          if [ -z "$UNIQUE_TOKEN" ] || [ "$UNIQUE_TOKEN" = "null" ]; then
            echo "‚ùå ERROR: unique-token is empty or null"
            exit 1
          fi
          
          if [ -z "$CONTAINER_ENV_NAME" ] || [ "$CONTAINER_ENV_NAME" = "null" ]; then
            echo "‚ùå ERROR: container-env-name is empty or null"
            exit 1
          fi
          
          if [ -z "$UAMI_ID" ] || [ "$UAMI_ID" = "null" ]; then
            echo "‚ùå ERROR: uami-id is empty or null"
            echo "üí° This usually means the User Assigned Managed Identity was not properly deployed"
            exit 1
          fi
          
          if [ -z "$CONTAINER_REGISTRY" ] || [ "$CONTAINER_REGISTRY" = "null" ]; then
            echo "‚ùå ERROR: container-registry is empty or null"
            exit 1
          fi
          
          # Set outputs
          echo "unique-token=$UNIQUE_TOKEN" >> $GITHUB_OUTPUT
          echo "container-env-name=$CONTAINER_ENV_NAME" >> $GITHUB_OUTPUT
          echo "uami-id=$UAMI_ID" >> $GITHUB_OUTPUT
          echo "container-registry=$CONTAINER_REGISTRY" >> $GITHUB_OUTPUT
          echo "app-insights-conn=$APP_INSIGHTS_CONN" >> $GITHUB_OUTPUT
          echo "cosmos-endpoint=$COSMOS_ENDPOINT" >> $GITHUB_OUTPUT
          echo "storage-endpoint=$STORAGE_ENDPOINT" >> $GITHUB_OUTPUT
          echo "keyvault-uri=$KEYVAULT_URI" >> $GITHUB_OUTPUT
          
          # Debug output
          echo "üîß Configuration values for ${{ inputs.environment }}:"
          echo "   Unique Token: $UNIQUE_TOKEN"
          echo "   Container Environment: $CONTAINER_ENV_NAME"
          echo "   User Assigned Managed Identity: $UAMI_ID"
          echo "   Container Registry: $CONTAINER_REGISTRY"

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Login to Azure Container Registry
        run: |
          az acr login --name ${{ steps.config.outputs.container-registry }}

      - name: Promote images from GHCR to ACR
        id: promote
        run: |
          BUILD_ID="${{ github.run_number }}"
          ACR_REGISTRY="${{ steps.config.outputs.container-registry }}"
          
          # Generate ACR image tags with environment suffix
          ACR_API_TAG="${ACR_REGISTRY}/${{ env.API_IMAGE_NAME }}:${BUILD_ID}-${{ inputs.environment }}"
          ACR_API_GATEWAY_TAG="${ACR_REGISTRY}/${{ env.API_GATEWAY_IMAGE_NAME }}:${BUILD_ID}-${{ inputs.environment }}"
          ACR_FRONTEND_TAG="${ACR_REGISTRY}/${{ env.FRONTEND_IMAGE_NAME }}:${BUILD_ID}-${{ inputs.environment }}"
          ACR_JOBS_TAG="${ACR_REGISTRY}/${{ env.JOBS_IMAGE_NAME }}:${BUILD_ID}-${{ inputs.environment }}"
          
          echo "üîÑ Promoting images from GHCR to ACR for ${{ inputs.environment }}..."
          echo "   API: ${{ inputs.api-image-tag }} ‚Üí ${ACR_API_TAG}"
          echo "   API Gateway: ${{ inputs.api-gateway-image-tag }} ‚Üí ${ACR_API_GATEWAY_TAG}"
          echo "   Frontend: ${{ inputs.frontend-image-tag }} ‚Üí ${ACR_FRONTEND_TAG}"
          echo "   Jobs: ${{ inputs.jobs-image-tag }} ‚Üí ${ACR_JOBS_TAG}"
          
          # Pull from GHCR and push to ACR
          docker pull ${{ inputs.api-image-tag }}
          docker tag ${{ inputs.api-image-tag }} ${ACR_API_TAG}
          docker push ${ACR_API_TAG}
          
          docker pull ${{ inputs.api-gateway-image-tag }}
          docker tag ${{ inputs.api-gateway-image-tag }} ${ACR_API_GATEWAY_TAG}
          docker push ${ACR_API_GATEWAY_TAG}
          
          docker pull ${{ inputs.frontend-image-tag }}
          docker tag ${{ inputs.frontend-image-tag }} ${ACR_FRONTEND_TAG}
          docker push ${ACR_FRONTEND_TAG}
          
          docker pull ${{ inputs.jobs-image-tag }}
          docker tag ${{ inputs.jobs-image-tag }} ${ACR_JOBS_TAG}
          docker push ${ACR_JOBS_TAG}
          
          # Set ACR image tags for deployment
          echo "api-image-tag=${ACR_API_TAG}" >> $GITHUB_OUTPUT
          echo "api-gateway-image-tag=${ACR_API_GATEWAY_TAG}" >> $GITHUB_OUTPUT
          echo "frontend-image-tag=${ACR_FRONTEND_TAG}" >> $GITHUB_OUTPUT
          echo "jobs-image-tag=${ACR_JOBS_TAG}" >> $GITHUB_OUTPUT
          
          echo "‚úÖ Image promotion completed"

      - name: Deploy API Gateway to Container Apps
        run: |
          APP_NAME="ca-awcs-gateway-${{ steps.config.outputs.unique-token }}"
          RG_NAME="${{ secrets.AZURE_RESOURCE_GROUP }}"
          
          echo "üõ°Ô∏è Deploying API Gateway: $APP_NAME"
          echo "üì¶ Using image: ${{ steps.promote.outputs.api-gateway-image-tag }}"
          
          # Check if container app already exists
          if az containerapp show --name $APP_NAME --resource-group $RG_NAME > /dev/null 2>&1; then
            echo "üìù Updating existing API Gateway Container App..."
            az containerapp update \
              --name $APP_NAME \
              --resource-group $RG_NAME \
              --image ${{ steps.promote.outputs.api-gateway-image-tag }} \
              --set-env-vars \
                API_INTERNAL_URL="http://ca-awcs-api-${{ steps.config.outputs.unique-token }}:8080" \
                ASPNETCORE_ENVIRONMENT=Production
          else
            echo "üÜï Creating new API Gateway Container App..."
            az containerapp create \
              --name $APP_NAME \
              --resource-group $RG_NAME \
              --environment ${{ steps.config.outputs.container-env-name }} \
              --image ${{ steps.promote.outputs.api-gateway-image-tag }} \
              --user-assigned ${{ steps.config.outputs.uami-id }} \
              --registry-identity ${{ steps.config.outputs.uami-id }} \
              --registry-server ${{ steps.config.outputs.container-registry }} \
              --target-port 8080 \
              --ingress external \
              --revisions-mode multiple \
              --min-replicas 1 \
              --max-replicas 10 \
              --cpu 0.25 \
              --memory 0.5Gi \
              --scale-rule-name http-scaler \
              --scale-rule-type http \
              --scale-rule-metadata concurrentRequests=100 \
              --env-vars \
                API_INTERNAL_URL="http://ca-awcs-api-${{ steps.config.outputs.unique-token }}:8080" \
                ASPNETCORE_ENVIRONMENT=Production
          fi
          
          echo "‚úÖ API Gateway deployment completed"

      - name: Deploy API to Container Apps
        run: |
          APP_NAME="ca-awcs-api-${{ steps.config.outputs.unique-token }}"
          RG_NAME="${{ secrets.AZURE_RESOURCE_GROUP }}"
          
          echo "üöÄ Deploying API: $APP_NAME"
          echo "üì¶ Using image: ${{ steps.promote.outputs.api-image-tag }}"
          
          # Check if container app already exists
          if az containerapp show --name $APP_NAME --resource-group $RG_NAME > /dev/null 2>&1; then
            echo "üìù Updating existing API Container App..."
            az containerapp update \
              --name $APP_NAME \
              --resource-group $RG_NAME \
              --image ${{ steps.promote.outputs.api-image-tag }} \
              --set-env-vars \
                ASPNETCORE_ENVIRONMENT=Production \
                APPLICATIONINSIGHTS_CONNECTION_STRING="${{ steps.config.outputs.app-insights-conn }}" \
                Azure__Storage__BlobEndpoint="${{ steps.config.outputs.storage-endpoint }}" \
                Azure__CosmosDb__Endpoint="${{ steps.config.outputs.cosmos-endpoint }}" \
                Azure__KeyVault__Uri="${{ steps.config.outputs.keyvault-uri }}"
          else
            echo "üÜï Creating new API Container App..."
            az containerapp create \
              --name $APP_NAME \
              --resource-group $RG_NAME \
              --environment ${{ steps.config.outputs.container-env-name }} \
              --image ${{ steps.promote.outputs.api-image-tag }} \
              --user-assigned ${{ steps.config.outputs.uami-id }} \
              --registry-identity ${{ steps.config.outputs.uami-id }} \
              --registry-server ${{ steps.config.outputs.container-registry }} \
              --target-port 8080 \
              --ingress internal \
              --revisions-mode multiple \
              --min-replicas 0 \
              --max-replicas 10 \
              --cpu 0.25 \
              --memory 0.5Gi \
              --scale-rule-name http-scaler \
              --scale-rule-type http \
              --scale-rule-metadata concurrentRequests=100 \
              --env-vars \
                ASPNETCORE_ENVIRONMENT=Production \
                APPLICATIONINSIGHTS_CONNECTION_STRING="${{ steps.config.outputs.app-insights-conn }}" \
                Azure__Storage__BlobEndpoint="${{ steps.config.outputs.storage-endpoint }}" \
                Azure__CosmosDb__Endpoint="${{ steps.config.outputs.cosmos-endpoint }}" \
                Azure__KeyVault__Uri="${{ steps.config.outputs.keyvault-uri }}"
          fi
          
          echo "‚úÖ API deployment completed"

      - name: Deploy Frontend to Container Apps
        run: |
          APP_NAME="ca-awcs-frontend-${{ steps.config.outputs.unique-token }}"
          RG_NAME="${{ secrets.AZURE_RESOURCE_GROUP }}"
          
          # Get API Gateway URL for frontend environment variable
          API_GATEWAY_URL="https://ca-awcs-gateway-${{ steps.config.outputs.unique-token }}.$(az containerapp env show --name ${{ steps.config.outputs.container-env-name }} --resource-group $RG_NAME --query 'properties.defaultDomain' -o tsv)"
          
          echo "üöÄ Deploying Frontend: $APP_NAME"
          echo "üì¶ Using image: ${{ steps.promote.outputs.frontend-image-tag }}"
          echo "üîó API Gateway URL: $API_GATEWAY_URL"
          
          # Get environment-specific Azure configuration
          AZURE_CLIENT_ID="${{ vars.FRONTEND_CLIENT_ID || secrets.FRONTEND_CLIENT_ID }}"
          AZURE_TENANT_ID="${{ secrets.AZURE_TENANT_ID }}"
          
          # Check if container app already exists
          if az containerapp show --name $APP_NAME --resource-group $RG_NAME > /dev/null 2>&1; then
            echo "üìù Updating existing Frontend Container App..."
            az containerapp update \
              --name $APP_NAME \
              --resource-group $RG_NAME \
              --image ${{ steps.promote.outputs.frontend-image-tag }} \
              --set-env-vars \
                VITE_API_BASE_URL="$API_GATEWAY_URL" \
                API_GATEWAY_URL="$API_GATEWAY_URL" \
                VITE_APPLICATIONINSIGHTS_CONNECTION_STRING="${{ steps.config.outputs.app-insights-conn }}" \
                VITE_AZURE_CLIENT_ID="$AZURE_CLIENT_ID" \
                VITE_AZURE_TENANT_ID="$AZURE_TENANT_ID"
          else
            echo "üÜï Creating new Frontend Container App..."
            az containerapp create \
              --name $APP_NAME \
              --resource-group $RG_NAME \
              --environment ${{ steps.config.outputs.container-env-name }} \
              --image ${{ steps.promote.outputs.frontend-image-tag }} \
              --user-assigned ${{ steps.config.outputs.uami-id }} \
              --registry-identity ${{ steps.config.outputs.uami-id }} \
              --registry-server ${{ steps.config.outputs.container-registry }} \
              --target-port 8080 \
              --ingress external \
              --revisions-mode multiple \
              --min-replicas 0 \
              --max-replicas 10 \
              --cpu 0.25 \
              --memory 0.5Gi \
              --scale-rule-name http-scaler \
              --scale-rule-type http \
              --scale-rule-metadata concurrentRequests=100 \
              --env-vars \
                VITE_API_BASE_URL="$API_GATEWAY_URL" \
                API_GATEWAY_URL="$API_GATEWAY_URL" \
                VITE_APPLICATIONINSIGHTS_CONNECTION_STRING="${{ steps.config.outputs.app-insights-conn }}" \
                VITE_AZURE_CLIENT_ID="$AZURE_CLIENT_ID" \
                VITE_AZURE_TENANT_ID="$AZURE_TENANT_ID"
          fi
          
          echo "‚úÖ Frontend deployment completed"

      - name: Deploy Cleanup Job to Container Apps
        run: |
          JOB_NAME="caj-awcs-cleanup-${{ steps.config.outputs.unique-token }}"
          RG_NAME="${{ secrets.AZURE_RESOURCE_GROUP }}"
          
          echo "üóÑÔ∏è Deploying Cleanup Job: $JOB_NAME"
          echo "üì¶ Using image: ${{ steps.promote.outputs.jobs-image-tag }}"
          
          # Check if container apps job already exists
          if az containerapp job show --name $JOB_NAME --resource-group $RG_NAME > /dev/null 2>&1; then
            echo "üìù Updating existing Cleanup Job..."
            az containerapp job update \
              --name $JOB_NAME \
              --resource-group $RG_NAME \
              --image ${{ steps.promote.outputs.jobs-image-tag }}
          else
            echo "üÜï Creating new Cleanup Job..."
            az containerapp job create \
              --name $JOB_NAME \
              --resource-group $RG_NAME \
              --environment ${{ steps.config.outputs.container-env-name }} \
              --trigger-type Schedule \
              --cron-expression "0 */2 * * *" \
              --replica-timeout 300 \
              --replica-retry-limit 3 \
              --replica-completion-count 1 \
              --parallelism 1 \
              --image ${{ steps.promote.outputs.jobs-image-tag }} \
              --user-assigned ${{ steps.config.outputs.uami-id }} \
              --registry-identity ${{ steps.config.outputs.uami-id }} \
              --registry-server ${{ steps.config.outputs.container-registry }} \
              --cpu 0.25 \
              --memory 0.5Gi \
              --env-vars \
                DOTNET_ENVIRONMENT=Production \
                APPLICATIONINSIGHTS_CONNECTION_STRING="${{ steps.config.outputs.app-insights-conn }}" \
                AzureOptions__Storage__BlobEndpoint="${{ steps.config.outputs.storage-endpoint }}" \
                AzureOptions__CosmosDb__Endpoint="${{ steps.config.outputs.cosmos-endpoint }}" \
                AzureOptions__KeyVault__Uri="${{ steps.config.outputs.keyvault-uri }}"
            
            echo "‚úÖ Cleanup Job created with User Assigned Managed Identity"
          fi
          
          echo "‚úÖ Cleanup Job deployment completed"

      - name: Get application URLs
        id: urls
        run: |
          RG_NAME="${{ secrets.AZURE_RESOURCE_GROUP }}"
          UNIQUE_TOKEN="${{ steps.config.outputs.unique-token }}"
          ENV_NAME="${{ steps.config.outputs.container-env-name }}"
          
          DOMAIN=$(az containerapp env show --name $ENV_NAME --resource-group $RG_NAME --query 'properties.defaultDomain' -o tsv)
          
          API_URL="https://ca-awcs-api-${UNIQUE_TOKEN}.${DOMAIN}"
          API_GATEWAY_URL="https://ca-awcs-gateway-${UNIQUE_TOKEN}.${DOMAIN}"
          FRONTEND_URL="https://ca-awcs-frontend-${UNIQUE_TOKEN}.${DOMAIN}"
          
          echo "api-url=$API_URL" >> $GITHUB_OUTPUT
          echo "api-gateway-url=$API_GATEWAY_URL" >> $GITHUB_OUTPUT
          echo "frontend-url=$FRONTEND_URL" >> $GITHUB_OUTPUT
          
          echo "üåê Application URLs for ${{ inputs.environment }}:"
          echo "   API: $API_URL"
          echo "   API Gateway: $API_GATEWAY_URL"
          echo "   Frontend: $FRONTEND_URL"
          
      - name: Run smoke tests
        run: |
          echo "üß™ Running smoke tests for ${{ inputs.environment }}..."
          
          # Test Frontend endpoint
          FRONTEND_URL="${{ steps.urls.outputs.frontend-url }}"
          echo "Testing Frontend at: $FRONTEND_URL"
          
          # Wait for frontend to be ready (up to 1 minute)
          for i in {1..12}; do
            if curl -f "$FRONTEND_URL" > /dev/null 2>&1; then
              echo "‚úÖ Frontend accessibility check passed"
              break
            fi
            if [ $i -eq 12 ]; then
              echo "‚ö†Ô∏è Frontend accessibility check timeout (this may be normal for cold start)"
            else
              echo "‚è≥ Waiting for Frontend to be ready... (attempt $i/12)"
              sleep 5
            fi
          done
          
          # Test API Gateway health endpoint
          API_GATEWAY_URL="${{ steps.urls.outputs.api-gateway-url }}"
          echo "Testing API Gateway health at: $API_GATEWAY_URL/health"
          
          # Wait for API Gateway to be ready (up to 2 minutes)
          for i in {1..24}; do
            if curl -f "$API_GATEWAY_URL/health" > /dev/null 2>&1; then
              echo "‚úÖ API Gateway health check passed"
              break
            fi
            if [ $i -eq 24 ]; then
              echo "‚ö†Ô∏è API Gateway health check timeout (this may be normal for cold start)"
            else
              echo "‚è≥ Waiting for API Gateway to be ready... (attempt $i/24)"
              sleep 5
            fi
          done
          
          echo "üéâ ${{ inputs.environment }} deployment verification completed"
          echo ""
          echo "üåê **Access your ${{ inputs.environment }} application:**"
          echo "   Frontend: $FRONTEND_URL"
          echo "   API Gateway: $API_GATEWAY_URL"