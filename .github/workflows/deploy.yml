name: Deploy Infrastructure and Applications

on:
  push:
    branches:
      - main
  workflow_dispatch:
    inputs:
      environment:
        description: 'Select environment to deploy'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - prod
      pushContainers:
        description: 'Push containers and deploy apps (false = build and test only, deploy infra only)'
        required: false
        default: true
        type: boolean
      skipInfrastructure:
        description: 'Skip infrastructure deployment (deploy apps only)'
        required: false
        default: false
        type: boolean
      resourceGroupName:
        description: 'Resource Group Name (leave empty for default)'
        required: false
        type: string

permissions:
  id-token: write
  contents: read
  packages: write
  checks: write # Required for test results to be published
  security-events: write # Required for Trivy scans

env:
  API_IMAGE_NAME: azure-web-content-share-api
  FRONTEND_IMAGE_NAME: azure-web-content-share-frontend
  JOBS_IMAGE_NAME: azure-web-content-share-jobs

jobs:
  determine-environment:
    name: Determine Target Environment
    runs-on: ubuntu-latest
    outputs:
      environment: ${{ steps.env.outputs.environment }}
      resource-group: ${{ steps.env.outputs.resource-group }}
      deploy-infra: ${{ steps.env.outputs.deploy-infra }}
      push-containers: ${{ steps.env.outputs.push-containers }}
    
    steps:
      - name: Determine environment and settings
        id: env
        run: |
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            echo "environment=${{ github.event.inputs.environment }}" >> $GITHUB_OUTPUT
            if [ -n "${{ github.event.inputs.resourceGroupName }}" ]; then
              echo "resource-group=${{ github.event.inputs.resourceGroupName }}" >> $GITHUB_OUTPUT
            else
              echo "resource-group=rg-awcs-${{ github.event.inputs.environment }}" >> $GITHUB_OUTPUT
            fi
            if [ "${{ github.event.inputs.skipInfrastructure }}" == "true" ]; then
              echo "deploy-infra=false" >> $GITHUB_OUTPUT
            else
              echo "deploy-infra=true" >> $GITHUB_OUTPUT
            fi
            if [ "${{ github.event.inputs.pushContainers }}" == "true" ]; then
              echo "push-containers=true" >> $GITHUB_OUTPUT
            else
              echo "push-containers=false" >> $GITHUB_OUTPUT
            fi
          else
            # Push to main = deploy to dev with containers
            echo "environment=dev" >> $GITHUB_OUTPUT
            echo "resource-group=rg-awcs-dev" >> $GITHUB_OUTPUT
            echo "deploy-infra=true" >> $GITHUB_OUTPUT
            echo "push-containers=true" >> $GITHUB_OUTPUT
          fi

  build-and-test:
    name: Build Code and Run Tests
    runs-on: ubuntu-latest
    needs: determine-environment
    outputs:
      api-image-tag: ${{ steps.images.outputs.api-image-tag }}
      frontend-image-tag: ${{ steps.images.outputs.frontend-image-tag }}
      jobs-image-tag: ${{ steps.images.outputs.jobs-image-tag }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Validate Bicep templates
        run: |
          echo "üí™ Validating main.bicep template..."
          az bicep build --file infra/bicep/main.bicep --stdout > /dev/null
          
          echo "üîç Validating individual modules..."
          for module in infra/bicep/modules/*/main.bicep; do
            echo "  üí™ Validating $module..."
            az bicep build --file "$module" --stdout > /dev/null
          done
          
          echo "‚úÖ All Bicep templates validated successfully!"        

      - name: Build and test API
        run: |
          echo "üî® Building API..."
          cd src/Api
          dotnet restore
          dotnet build --configuration Release --no-restore
          
          echo "üß™ Testing API..."
          cd ../Tests
          dotnet test --configuration Release --verbosity normal --logger trx --results-directory TestResults
          
      - name: Build and test Frontend
        run: |
          echo "üî® Building Frontend..."
          cd src/Frontend
          npm ci
          npm run type-check
          npm run build

      - name: Build and test Jobs
        run: |
          echo "üî® Building Jobs..."
          cd src/Jobs
          dotnet restore
          dotnet build --configuration Release --no-restore

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Generate GHCR image tags
        id: images
        run: |
          BUILD_ID="${{ github.run_number }}"
          REGISTRY="ghcr.io/${{ github.repository_owner }}"
          
          API_TAG="${REGISTRY}/${{ env.API_IMAGE_NAME }}:${BUILD_ID}"
          FRONTEND_TAG="${REGISTRY}/${{ env.FRONTEND_IMAGE_NAME }}:${BUILD_ID}"
          JOBS_TAG="${REGISTRY}/${{ env.JOBS_IMAGE_NAME }}:${BUILD_ID}"
          
          echo "api-image-tag=${API_TAG}" >> $GITHUB_OUTPUT
          echo "frontend-image-tag=${FRONTEND_TAG}" >> $GITHUB_OUTPUT
          echo "jobs-image-tag=${JOBS_TAG}" >> $GITHUB_OUTPUT
          
          echo "üè∑Ô∏è API Image: ${API_TAG}"
          echo "üè∑Ô∏è Frontend Image: ${FRONTEND_TAG}"
          echo "üè∑Ô∏è Jobs Image: ${JOBS_TAG}"

      - name: Build and push API image to GHCR
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./src/Api/Dockerfile
          push: true
          tags: ${{ steps.images.outputs.api-image-tag }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          sbom: true
          provenance: true

      - name: Build and push Frontend image to GHCR
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./src/Frontend/Dockerfile
          push: true
          tags: ${{ steps.images.outputs.frontend-image-tag }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          sbom: true
          provenance: true          

      - name: Build and push Jobs image to GHCR
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./src/Jobs/Dockerfile
          push: true
          tags: ${{ steps.images.outputs.jobs-image-tag }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          sbom: true
          provenance: true          

      # Security Scanning with Trivy
      - name: Run Trivy vulnerability scanner on API
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: 'src/Api'
          format: 'sarif'
          output: 'trivy-api-results.sarif'

      - name: Run Trivy vulnerability scanner on Frontend  
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: 'src/Frontend'
          format: 'sarif'
          output: 'trivy-frontend-results.sarif'

      - name: Run Trivy vulnerability scanner on Jobs
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: 'src/Jobs'
          format: 'sarif'
          output: 'trivy-jobs-results.sarif'

      - name: Upload API Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-api-results.sarif'
          category: 'trivy-api'

      - name: Upload Frontend Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-frontend-results.sarif'
          category: 'trivy-frontend'

      - name: Upload Jobs Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-jobs-results.sarif'
          category: 'trivy-jobs'

      - name: Publish test results
        uses: dorny/test-reporter@v1
        if: always()
        with:
          name: API Tests
          path: src/Tests/TestResults/*.trx
          reporter: dotnet-trx

      - name: Publish build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts-${{ github.run_number }}
          path: |
            infra/
          retention-days: 30

      - name: Build summary
        run: |
          echo "‚úÖ Code build and test completed successfully"
          echo "üì¶ Container images built and pushed to GHCR"
          echo "   API: ${{ steps.images.outputs.api-image-tag }}"
          echo "   Frontend: ${{ steps.images.outputs.frontend-image-tag }}"
          echo "   Jobs: ${{ steps.images.outputs.jobs-image-tag }}"

  deploy-infrastructure:
    name: Deploy Infrastructure
    runs-on: ubuntu-latest
    needs: [determine-environment, build-and-test]
    if: needs.determine-environment.outputs.deploy-infra == 'true'
    environment: 
      name: ${{ needs.determine-environment.outputs.environment }}
    outputs:
      container-registry: ${{ steps.deploy.outputs.containerRegistryLoginServer }}
      container-registry-name: ${{ steps.deploy.outputs.containerRegistryName }}
      unique-token: ${{ steps.deploy.outputs.uniqueResourceToken }}
      container-env-name: ${{ steps.deploy.outputs.containerAppsEnvironmentName }}
      uami-id: ${{ steps.deploy.outputs.userAssignedManagedIdentityId }}
      app-insights-conn: ${{ steps.deploy.outputs.applicationInsightsConnectionString }}
      cosmos-endpoint: ${{ steps.deploy.outputs.cosmosDbEndpoint }}
      storage-endpoint: ${{ steps.deploy.outputs.storageAccountBlobEndpoint }}
      keyvault-uri: ${{ steps.deploy.outputs.keyVaultUri }}
    
    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts-${{ github.run_number }}
          path: ./
        
      - name: Azure login using OIDC
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Deploy infrastructure
        id: deploy
        uses: azure/arm-deploy@v2
        with:
          scope: resourcegroup
          resourceGroupName: ${{ needs.determine-environment.outputs.resource-group }}
          template: bicep/main.bicep
          parameters: bicep/parameters/${{ needs.determine-environment.outputs.environment }}.bicepparam
          failOnStdErr: false
          deploymentName: 'infra-${{ needs.determine-environment.outputs.environment }}-${{ github.run_number }}'
          
      - name: Create latest deployment alias
        uses: azure/arm-deploy@v2
        with:
          scope: resourcegroup
          resourceGroupName: ${{ needs.determine-environment.outputs.resource-group }}
          template: bicep/main.bicep
          parameters: bicep/parameters/${{ needs.determine-environment.outputs.environment }}.bicepparam
          failOnStdErr: false
          deploymentName: 'infra-${{ needs.determine-environment.outputs.environment }}-latest'

      - name: Output deployment results
        run: |
          echo "‚úÖ Infrastructure deployed successfully"
          echo "üèóÔ∏è Resource Group: ${{ needs.determine-environment.outputs.resource-group }}"
          echo "üåç Location: ${{ steps.deploy.outputs.location }}"
          echo "üîß Container Apps Environment: ${{ steps.deploy.outputs.containerAppsEnvironmentName }}"
          echo "üì¶ Container Registry: ${{ steps.deploy.outputs.containerRegistryLoginServer }}"
          echo "üîê User Managed Identity: ${{ steps.deploy.outputs.userAssignedManagedIdentityId }}"
          
          echo ""
          echo "üîç DEBUG: All deployment outputs:"
          echo "   uniqueResourceToken: ${{ steps.deploy.outputs.uniqueResourceToken }}"
          echo "   containerAppsEnvironmentName: ${{ steps.deploy.outputs.containerAppsEnvironmentName }}"
          echo "   userAssignedManagedIdentityId: ${{ steps.deploy.outputs.userAssignedManagedIdentityId }}"
          echo "   containerRegistryLoginServer: ${{ steps.deploy.outputs.containerRegistryLoginServer }}"
          echo "   applicationInsightsConnectionString: ${{ steps.deploy.outputs.applicationInsightsConnectionString }}"
          echo "   cosmosDbEndpoint: ${{ steps.deploy.outputs.cosmosDbEndpoint }}"
          echo "   storageAccountBlobEndpoint: ${{ steps.deploy.outputs.storageAccountBlobEndpoint }}"
          echo "   keyVaultUri: ${{ steps.deploy.outputs.keyVaultUri }}"

      - name: Configure Cosmos DB RBAC for User Assigned Managed Identity
        run: |
          echo "üóÑÔ∏è Configuring Cosmos DB RBAC for User Assigned Managed Identity..."
          
          # Get the User Assigned Managed Identity principal ID
          UAMI_PRINCIPAL_ID=$(az identity show \
            --ids "${{ steps.deploy.outputs.userAssignedManagedIdentityId }}" \
            --query 'principalId' -o tsv)
          
          if [ -z "$UAMI_PRINCIPAL_ID" ]; then
            echo "‚ùå Failed to get User Assigned Managed Identity principal ID"
            exit 1
          fi
          
          echo "üìã UAMI Principal ID: $UAMI_PRINCIPAL_ID"
          
          # Get Cosmos DB account name from deployment outputs
          COSMOS_ACCOUNT_NAME=$(az deployment group show \
            --resource-group "${{ needs.determine-environment.outputs.resource-group }}" \
            --name "infra-${{ needs.determine-environment.outputs.environment }}-${{ github.run_number }}" \
            --query 'properties.outputs.cosmosDbAccountName.value' -o tsv)
          
          if [ -z "$COSMOS_ACCOUNT_NAME" ]; then
            echo "‚ùå Failed to get Cosmos DB account name"
            exit 1
          fi
          
          echo "üóÑÔ∏è Cosmos DB Account: $COSMOS_ACCOUNT_NAME"
          
          # Create scope for the Cosmos DB account
          COSMOS_SCOPE="/subscriptions/${{ secrets.AZURE_SUBSCRIPTION_ID }}/resourceGroups/${{ needs.determine-environment.outputs.resource-group }}/providers/Microsoft.DocumentDB/databaseAccounts/${COSMOS_ACCOUNT_NAME}"
          
          # Assign Cosmos DB Built-in Data Contributor role to UAMI
          echo "üóÑÔ∏è Assigning Cosmos DB Built-in Data Contributor role to UAMI..."
          az cosmosdb sql role assignment create \
            --resource-group "${{ needs.determine-environment.outputs.resource-group }}" \
            --account-name "$COSMOS_ACCOUNT_NAME" \
            --role-definition-id "00000000-0000-0000-0000-000000000002" \
            --principal-id "$UAMI_PRINCIPAL_ID" \
            --scope "$COSMOS_SCOPE"
          
          echo "‚úÖ Cosmos DB RBAC configuration completed"

      - name: Configure ACR Push permissions for GitHub Actions
        run: |
          echo "üì¶ Configuring ACR Push permissions for GitHub Actions Service Principal..."
          
          # Get resource group ID for scoping
          RG_ID=$(az group show \
            --name "${{ needs.determine-environment.outputs.resource-group }}" \
            --query 'id' -o tsv)
          
          # Assign AcrPush role to GitHub Actions Service Principal
          echo "üîê Assigning AcrPush role to GitHub Actions Service Principal..."
          az role assignment create \
            --assignee "${{ secrets.AZURE_CLIENT_ID }}" \
            --role "8311e382-0749-4cb8-b61a-304f252e45ec" \
            --scope "$RG_ID" || echo "‚ö†Ô∏è Role assignment may already exist"
          
          echo "‚úÖ GitHub Actions ACR Push configuration completed"

  deploy-applications:
    name: Deploy Applications to Container Apps
    runs-on: ubuntu-latest
    needs: [determine-environment, build-and-test, deploy-infrastructure]
    if: always() && !cancelled() && needs.determine-environment.outputs.push-containers == 'true' && (needs.deploy-infrastructure.result == 'success' || needs.deploy-infrastructure.result == 'skipped')
    environment: 
      name: ${{ needs.determine-environment.outputs.environment }}
    
    steps:
      - name: Azure login using OIDC
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Get deployment configuration and image tags
        id: config
        run: |
          if [ "${{ needs.deploy-infrastructure.result }}" == "success" ]; then
            # Use outputs from infrastructure deployment
            echo "üìã Using outputs from infrastructure deployment job"
            UNIQUE_TOKEN="${{ needs.deploy-infrastructure.outputs.unique-token }}"
            CONTAINER_ENV_NAME="${{ needs.deploy-infrastructure.outputs.container-env-name }}"
            UAMI_ID="${{ needs.deploy-infrastructure.outputs.uami-id }}"
            CONTAINER_REGISTRY="${{ needs.deploy-infrastructure.outputs.container-registry }}"
            APP_INSIGHTS_CONN="${{ needs.deploy-infrastructure.outputs.app-insights-conn }}"
            COSMOS_ENDPOINT="${{ needs.deploy-infrastructure.outputs.cosmos-endpoint }}"
            STORAGE_ENDPOINT="${{ needs.deploy-infrastructure.outputs.storage-endpoint }}"
            KEYVAULT_URI="${{ needs.deploy-infrastructure.outputs.keyvault-uri }}"
            
            echo "üîç DEBUG: Raw values from infrastructure job outputs:"
            echo "   Raw unique-token: '${{ needs.deploy-infrastructure.outputs.unique-token }}'"
            echo "   Raw container-env-name: '${{ needs.deploy-infrastructure.outputs.container-env-name }}'"  
            echo "   Raw uami-id: '${{ needs.deploy-infrastructure.outputs.uami-id }}'"
            echo "   Raw container-registry: '${{ needs.deploy-infrastructure.outputs.container-registry }}'"
            
            # If critical values are empty from job outputs, try to get them directly from deployment
            if [ -z "$UAMI_ID" ] || [ "$UAMI_ID" = "null" ]; then
              echo "‚ö†Ô∏è UAMI ID is empty from job outputs, querying deployment directly..."
              DEPLOYMENT_NAME="infra-${{ needs.determine-environment.outputs.environment }}-${{ github.run_number }}"
              RG_NAME="${{ needs.determine-environment.outputs.resource-group }}"
              
              UAMI_ID=$(az deployment group show --resource-group $RG_NAME --name $DEPLOYMENT_NAME --query 'properties.outputs.userAssignedManagedIdentityId.value' -o tsv)
              echo "   Direct query UAMI ID: '$UAMI_ID'"
            fi
            
            if [ -z "$UNIQUE_TOKEN" ] || [ "$UNIQUE_TOKEN" = "null" ]; then
              echo "‚ö†Ô∏è Unique token is empty from job outputs, querying deployment directly..."
              DEPLOYMENT_NAME="infra-${{ needs.determine-environment.outputs.environment }}-${{ github.run_number }}"
              RG_NAME="${{ needs.determine-environment.outputs.resource-group }}"
              
              UNIQUE_TOKEN=$(az deployment group show --resource-group $RG_NAME --name $DEPLOYMENT_NAME --query 'properties.outputs.uniqueResourceToken.value' -o tsv)
              echo "   Direct query unique token: '$UNIQUE_TOKEN'"
            fi
            
            if [ -z "$CONTAINER_ENV_NAME" ] || [ "$CONTAINER_ENV_NAME" = "null" ]; then
              echo "‚ö†Ô∏è Container env name is empty from job outputs, querying deployment directly..."
              DEPLOYMENT_NAME="infra-${{ needs.determine-environment.outputs.environment }}-${{ github.run_number }}"
              RG_NAME="${{ needs.determine-environment.outputs.resource-group }}"
              
              CONTAINER_ENV_NAME=$(az deployment group show --resource-group $RG_NAME --name $DEPLOYMENT_NAME --query 'properties.outputs.containerAppsEnvironmentName.value' -o tsv)
              echo "   Direct query container env name: '$CONTAINER_ENV_NAME'"
            fi
            
            if [ -z "$CONTAINER_REGISTRY" ] || [ "$CONTAINER_REGISTRY" = "null" ]; then
              echo "‚ö†Ô∏è Container registry is empty from job outputs, querying deployment directly..."
              DEPLOYMENT_NAME="infra-${{ needs.determine-environment.outputs.environment }}-${{ github.run_number }}"
              RG_NAME="${{ needs.determine-environment.outputs.resource-group }}"
              
              CONTAINER_REGISTRY=$(az deployment group show --resource-group $RG_NAME --name $DEPLOYMENT_NAME --query 'properties.outputs.containerRegistryLoginServer.value' -o tsv)
              echo "   Direct query container registry: '$CONTAINER_REGISTRY'"
            fi
          else
            # Get from existing deployment (skip infra mode)
            DEPLOYMENT_NAME="infra-${{ needs.determine-environment.outputs.environment }}-latest"
            RG_NAME="${{ needs.determine-environment.outputs.resource-group }}"
            
            # Verify deployment exists
            if ! az deployment group show --resource-group $RG_NAME --name $DEPLOYMENT_NAME > /dev/null 2>&1; then
              echo "‚ùå ERROR: Deployment '$DEPLOYMENT_NAME' not found in resource group '$RG_NAME'"
              echo "üí° Either run with infrastructure deployment enabled or ensure infrastructure has been deployed previously"
              exit 1
            fi
            
            echo "üìã Getting configuration from existing deployment: $DEPLOYMENT_NAME"
            
            UNIQUE_TOKEN=$(az deployment group show --resource-group $RG_NAME --name $DEPLOYMENT_NAME --query 'properties.outputs.uniqueResourceToken.value' -o tsv)
            CONTAINER_ENV_NAME=$(az deployment group show --resource-group $RG_NAME --name $DEPLOYMENT_NAME --query 'properties.outputs.containerAppsEnvironmentName.value' -o tsv)
            UAMI_ID=$(az deployment group show --resource-group $RG_NAME --name $DEPLOYMENT_NAME --query 'properties.outputs.userAssignedManagedIdentityId.value' -o tsv)
            CONTAINER_REGISTRY=$(az deployment group show --resource-group $RG_NAME --name $DEPLOYMENT_NAME --query 'properties.outputs.containerRegistryLoginServer.value' -o tsv)
            APP_INSIGHTS_CONN=$(az deployment group show --resource-group $RG_NAME --name $DEPLOYMENT_NAME --query 'properties.outputs.applicationInsightsConnectionString.value' -o tsv)
            COSMOS_ENDPOINT=$(az deployment group show --resource-group $RG_NAME --name $DEPLOYMENT_NAME --query 'properties.outputs.cosmosDbEndpoint.value' -o tsv)
            STORAGE_ENDPOINT=$(az deployment group show --resource-group $RG_NAME --name $DEPLOYMENT_NAME --query 'properties.outputs.storageAccountBlobEndpoint.value' -o tsv)
            KEYVAULT_URI=$(az deployment group show --resource-group $RG_NAME --name $DEPLOYMENT_NAME --query 'properties.outputs.keyVaultUri.value' -o tsv)
          fi
          
          # Validate critical configuration values
          if [ -z "$UNIQUE_TOKEN" ] || [ "$UNIQUE_TOKEN" = "null" ]; then
            echo "‚ùå ERROR: unique-token is empty or null"
            exit 1
          fi
          
          if [ -z "$CONTAINER_ENV_NAME" ] || [ "$CONTAINER_ENV_NAME" = "null" ]; then
            echo "‚ùå ERROR: container-env-name is empty or null"
            exit 1
          fi
          
          if [ -z "$UAMI_ID" ] || [ "$UAMI_ID" = "null" ]; then
            echo "‚ùå ERROR: uami-id is empty or null"
            echo "üí° This usually means the User Assigned Managed Identity was not properly deployed"
            exit 1
          fi
          
          if [ -z "$CONTAINER_REGISTRY" ] || [ "$CONTAINER_REGISTRY" = "null" ]; then
            echo "‚ùå ERROR: container-registry is empty or null"
            exit 1
          fi
          
          # Set outputs
          echo "unique-token=$UNIQUE_TOKEN" >> $GITHUB_OUTPUT
          echo "container-env-name=$CONTAINER_ENV_NAME" >> $GITHUB_OUTPUT
          echo "uami-id=$UAMI_ID" >> $GITHUB_OUTPUT
          echo "container-registry=$CONTAINER_REGISTRY" >> $GITHUB_OUTPUT
          echo "app-insights-conn=$APP_INSIGHTS_CONN" >> $GITHUB_OUTPUT
          echo "cosmos-endpoint=$COSMOS_ENDPOINT" >> $GITHUB_OUTPUT
          echo "storage-endpoint=$STORAGE_ENDPOINT" >> $GITHUB_OUTPUT
          echo "keyvault-uri=$KEYVAULT_URI" >> $GITHUB_OUTPUT
          
          # Debug output
          echo "üîß Configuration values:"
          echo "   Unique Token: $UNIQUE_TOKEN"
          echo "   Container Environment: $CONTAINER_ENV_NAME"
          echo "   User Assigned Managed Identity: $UAMI_ID"
          echo "   Container Registry: $CONTAINER_REGISTRY"
          
          # Use GHCR images from build stage
          echo "api-image-tag=${{ needs.build-and-test.outputs.api-image-tag }}" >> $GITHUB_OUTPUT
          echo "frontend-image-tag=${{ needs.build-and-test.outputs.frontend-image-tag }}" >> $GITHUB_OUTPUT
          echo "jobs-image-tag=${{ needs.build-and-test.outputs.jobs-image-tag }}" >> $GITHUB_OUTPUT

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Login to Azure Container Registry
        run: |
          az acr login --name ${{ steps.config.outputs.container-registry }}

      - name: Promote images from GHCR to ACR
        id: promote
        run: |
          BUILD_ID="${{ github.run_number }}"
          ACR_REGISTRY="${{ steps.config.outputs.container-registry }}"
          
          # Generate ACR image tags
          ACR_API_TAG="${ACR_REGISTRY}/${{ env.API_IMAGE_NAME }}:${BUILD_ID}"
          ACR_FRONTEND_TAG="${ACR_REGISTRY}/${{ env.FRONTEND_IMAGE_NAME }}:${BUILD_ID}"
          ACR_JOBS_TAG="${ACR_REGISTRY}/${{ env.JOBS_IMAGE_NAME }}:${BUILD_ID}"
          
          echo "üîÑ Promoting images from GHCR to ACR..."
          echo "   API: ${{ steps.config.outputs.api-image-tag }} ‚Üí ${ACR_API_TAG}"
          echo "   Frontend: ${{ steps.config.outputs.frontend-image-tag }} ‚Üí ${ACR_FRONTEND_TAG}"
          echo "   Jobs: ${{ steps.config.outputs.jobs-image-tag }} ‚Üí ${ACR_JOBS_TAG}"
          
          # Pull from GHCR and push to ACR
          docker pull ${{ steps.config.outputs.api-image-tag }}
          docker tag ${{ steps.config.outputs.api-image-tag }} ${ACR_API_TAG}
          docker push ${ACR_API_TAG}
          
          docker pull ${{ steps.config.outputs.frontend-image-tag }}
          docker tag ${{ steps.config.outputs.frontend-image-tag }} ${ACR_FRONTEND_TAG}
          docker push ${ACR_FRONTEND_TAG}
          
          docker pull ${{ steps.config.outputs.jobs-image-tag }}
          docker tag ${{ steps.config.outputs.jobs-image-tag }} ${ACR_JOBS_TAG}
          docker push ${ACR_JOBS_TAG}
          
          # Set ACR image tags for deployment
          echo "api-image-tag=${ACR_API_TAG}" >> $GITHUB_OUTPUT
          echo "frontend-image-tag=${ACR_FRONTEND_TAG}" >> $GITHUB_OUTPUT
          echo "jobs-image-tag=${ACR_JOBS_TAG}" >> $GITHUB_OUTPUT
          
          echo "‚úÖ Image promotion completed"

      - name: Deploy API to Container Apps
        run: |
          APP_NAME="ca-awcs-api-${{ steps.config.outputs.unique-token }}"
          RG_NAME="${{ needs.determine-environment.outputs.resource-group }}"
          
          echo "üöÄ Deploying API: $APP_NAME"
          echo "üì¶ Using image: ${{ steps.promote.outputs.api-image-tag }}"
          
          # Check if container app already exists
          if az containerapp show --name $APP_NAME --resource-group $RG_NAME > /dev/null 2>&1; then
            echo "üìù Updating existing API Container App..."
            az containerapp update \
              --name $APP_NAME \
              --resource-group $RG_NAME \
              --image ${{ steps.promote.outputs.api-image-tag }} \
              --set-env-vars \
                ASPNETCORE_ENVIRONMENT=Production \
                APPLICATIONINSIGHTS_CONNECTION_STRING="${{ steps.config.outputs.app-insights-conn }}" \
                Azure__Storage__BlobEndpoint="${{ steps.config.outputs.storage-endpoint }}" \
                Azure__CosmosDb__Endpoint="${{ steps.config.outputs.cosmos-endpoint }}" \
                Azure__KeyVault__Uri="${{ steps.config.outputs.keyvault-uri }}"
          else
            echo "üÜï Creating new API Container App..."
            az containerapp create \
              --name $APP_NAME \
              --resource-group $RG_NAME \
              --environment ${{ steps.config.outputs.container-env-name }} \
              --image ${{ steps.promote.outputs.api-image-tag }} \
              --user-assigned ${{ steps.config.outputs.uami-id }} \
              --registry-identity ${{ steps.config.outputs.uami-id }} \
              --registry-server ${{ steps.config.outputs.container-registry }} \
              --target-port 8080 \
              --ingress external \
              --min-replicas 0 \
              --max-replicas 10 \
              --cpu 0.25 \
              --memory 0.5Gi \
              --scale-rule-name http-scaler \
              --scale-rule-type http \
              --scale-rule-metadata concurrentRequests=100 \
              --env-vars \
                ASPNETCORE_ENVIRONMENT=Production \
                APPLICATIONINSIGHTS_CONNECTION_STRING="${{ steps.config.outputs.app-insights-conn }}" \
                Azure__Storage__BlobEndpoint="${{ steps.config.outputs.storage-endpoint }}" \
                Azure__CosmosDb__Endpoint="${{ steps.config.outputs.cosmos-endpoint }}" \
                Azure__KeyVault__Uri="${{ steps.config.outputs.keyvault-uri }}"
          fi
          
          echo "‚úÖ API deployment completed"

      - name: Deploy Frontend to Container Apps
        run: |
          APP_NAME="ca-awcs-frontend-${{ steps.config.outputs.unique-token }}"
          RG_NAME="${{ needs.determine-environment.outputs.resource-group }}"
          
          # Get API URL for frontend environment variable
          API_URL="https://ca-awcs-api-${{ steps.config.outputs.unique-token }}.$(az containerapp env show --name ${{ steps.config.outputs.container-env-name }} --resource-group $RG_NAME --query 'properties.defaultDomain' -o tsv)"
          
          echo "üöÄ Deploying Frontend: $APP_NAME"
          echo "üì¶ Using image: ${{ steps.promote.outputs.frontend-image-tag }}"
          echo "üîó API URL: $API_URL"
          
          # Check if container app already exists
          if az containerapp show --name $APP_NAME --resource-group $RG_NAME > /dev/null 2>&1; then
            echo "üìù Updating existing Frontend Container App..."
            az containerapp update \
              --name $APP_NAME \
              --resource-group $RG_NAME \
              --image ${{ steps.promote.outputs.frontend-image-tag }} \
              --set-env-vars \
                VITE_API_BASE_URL="$API_URL"
          else
            echo "üÜï Creating new Frontend Container App..."
            az containerapp create \
              --name $APP_NAME \
              --resource-group $RG_NAME \
              --environment ${{ steps.config.outputs.container-env-name }} \
              --image ${{ steps.promote.outputs.frontend-image-tag }} \
              --user-assigned ${{ steps.config.outputs.uami-id }} \
              --registry-identity ${{ steps.config.outputs.uami-id }} \
              --registry-server ${{ steps.config.outputs.container-registry }} \
              --target-port 8080 \
              --ingress external \
              --min-replicas 0 \
              --max-replicas 10 \
              --cpu 0.25 \
              --memory 0.5Gi \
              --scale-rule-name http-scaler \
              --scale-rule-type http \
              --scale-rule-metadata concurrentRequests=100 \
              --env-vars \
                VITE_API_BASE_URL="$API_URL"
          fi
          
          echo "‚úÖ Frontend deployment completed"

      - name: Deploy Cleanup Job to Container Apps
        run: |
          JOB_NAME="caj-awcs-cleanup-${{ steps.config.outputs.unique-token }}"
          RG_NAME="${{ needs.determine-environment.outputs.resource-group }}"
          
          echo "üóÑÔ∏è Deploying Cleanup Job: $JOB_NAME"
          echo "üì¶ Using image: ${{ steps.promote.outputs.jobs-image-tag }}"
          
          # Check if container apps job already exists
          if az containerapp job show --name $JOB_NAME --resource-group $RG_NAME > /dev/null 2>&1; then
            echo "üìù Updating existing Cleanup Job..."
            az containerapp job update \
              --name $JOB_NAME \
              --resource-group $RG_NAME \
              --image ${{ steps.promote.outputs.jobs-image-tag }}
          else
            echo "üÜï Creating new Cleanup Job..."
            az containerapp job create \
              --name $JOB_NAME \
              --resource-group $RG_NAME \
              --environment ${{ steps.config.outputs.container-env-name }} \
              --trigger-type Schedule \
              --cron-expression "0 */2 * * *" \
              --replica-timeout 300 \
              --replica-retry-limit 3 \
              --replica-completion-count 1 \
              --parallelism 1 \
              --image ${{ steps.promote.outputs.jobs-image-tag }} \
              --user-assigned ${{ steps.config.outputs.uami-id }} \
              --registry-identity ${{ steps.config.outputs.uami-id }} \
              --registry-server ${{ steps.config.outputs.container-registry }} \
              --cpu 0.25 \
              --memory 0.5Gi \
              --env-vars \
                DOTNET_ENVIRONMENT=Production \
                APPLICATIONINSIGHTS_CONNECTION_STRING="${{ steps.config.outputs.app-insights-conn }}" \
                AzureOptions__Storage__BlobEndpoint="${{ steps.config.outputs.storage-endpoint }}" \
                AzureOptions__CosmosDb__Endpoint="${{ steps.config.outputs.cosmos-endpoint }}" \
                AzureOptions__KeyVault__Uri="${{ steps.config.outputs.keyvault-uri }}"
            
            echo "‚úÖ Cleanup Job created with User Assigned Managed Identity"
          fi
          
          echo "‚úÖ Cleanup Job deployment completed"

      - name: Get application URLs
        id: urls
        run: |
          RG_NAME="${{ needs.determine-environment.outputs.resource-group }}"
          UNIQUE_TOKEN="${{ steps.config.outputs.unique-token }}"
          ENV_NAME="${{ steps.config.outputs.container-env-name }}"
          
          DOMAIN=$(az containerapp env show --name $ENV_NAME --resource-group $RG_NAME --query 'properties.defaultDomain' -o tsv)
          
          API_URL="https://ca-awcs-api-${UNIQUE_TOKEN}.${DOMAIN}"
          FRONTEND_URL="https://ca-awcs-frontend-${UNIQUE_TOKEN}.${DOMAIN}"
          
          echo "api-url=$API_URL" >> $GITHUB_OUTPUT
          echo "frontend-url=$FRONTEND_URL" >> $GITHUB_OUTPUT
          
          echo "üåê Application URLs:"
          echo "   API: $API_URL"
          echo "   Frontend: $FRONTEND_URL"
          
      - name: Run smoke tests
        run: |
          echo "üß™ Running smoke tests..."
          
          # Test API health endpoint
          API_URL="${{ steps.urls.outputs.api-url }}"
          echo "Testing API health at: $API_URL/health"
          
          # Wait for application to be ready (up to 2 minutes)
          for i in {1..24}; do
            if curl -f "$API_URL/health" > /dev/null 2>&1; then
              echo "‚úÖ API health check passed"
              break
            fi
            if [ $i -eq 24 ]; then
              echo "‚ö†Ô∏è API health check timeout (this may be normal for cold start)"
            else
              echo "‚è≥ Waiting for API to be ready... (attempt $i/24)"
              sleep 5
            fi
          done
          
          # Test Frontend
          FRONTEND_URL="${{ steps.urls.outputs.frontend-url }}"
          echo "Testing Frontend at: $FRONTEND_URL"
          
          for i in {1..12}; do
            if curl -f "$FRONTEND_URL" > /dev/null 2>&1; then
              echo "‚úÖ Frontend accessibility check passed"
              break
            fi
            if [ $i -eq 12 ]; then
              echo "‚ö†Ô∏è Frontend accessibility check timeout (this may be normal for cold start)"
            else
              echo "‚è≥ Waiting for Frontend to be ready... (attempt $i/12)"
              sleep 5
            fi
          done
          
          echo "üéâ Deployment verification completed"
          echo ""
          echo "üåê **Access your application:**"
          echo "   Frontend: $FRONTEND_URL"
          echo "   API: $API_URL"