name: Deploy Infrastructure and Applications

on:
  push:
    branches:
      - main
  workflow_dispatch:
    inputs:
      environment:
        description: 'Select environment to deploy'
        required: true
        default: 'development'
        type: choice
        options:
          - development
          - production
          - both
      pushContainers:
        description: 'Push containers and deploy apps (false = build and test only)'
        required: false
        default: true
        type: boolean
      skipInfrastructure:
        description: 'Skip infrastructure deployment (deploy apps only)'
        required: false
        default: false
        type: boolean

permissions:
  id-token: write
  contents: read
  packages: write
  checks: write # Required for test results to be published
  security-events: write # Required for Trivy scans

env:
  API_IMAGE_NAME: azure-web-content-share-api
  API_GATEWAY_IMAGE_NAME: azure-web-content-share-api-gateway
  FRONTEND_IMAGE_NAME: azure-web-content-share-frontend
  JOBS_IMAGE_NAME: azure-web-content-share-jobs

jobs:
  determine-environment:
    name: Determine Target Environment
    runs-on: ubuntu-latest
    outputs:
      deploy-development: ${{ steps.env.outputs.deploy-development }}
      deploy-production: ${{ steps.env.outputs.deploy-production }}
      skip-infrastructure: ${{ steps.env.outputs.skip-infrastructure }}
      push-containers: ${{ steps.env.outputs.push-containers }}
    
    steps:
      - name: Determine environment and settings
        id: env
        run: |
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            ENVIRONMENT="${{ github.event.inputs.environment }}"
            
            # Determine which environments to deploy
            if [ "$ENVIRONMENT" == "both" ]; then
              echo "deploy-development=true" >> $GITHUB_OUTPUT
              echo "deploy-production=true" >> $GITHUB_OUTPUT
            elif [ "$ENVIRONMENT" == "development" ]; then
              echo "deploy-development=true" >> $GITHUB_OUTPUT
              echo "deploy-production=false" >> $GITHUB_OUTPUT
            elif [ "$ENVIRONMENT" == "production" ]; then
              echo "deploy-development=false" >> $GITHUB_OUTPUT
              echo "deploy-production=true" >> $GITHUB_OUTPUT
            fi
            
            if [ "${{ github.event.inputs.skipInfrastructure }}" == "true" ]; then
              echo "skip-infrastructure=true" >> $GITHUB_OUTPUT
            else
              echo "skip-infrastructure=false" >> $GITHUB_OUTPUT
            fi
            
            if [ "${{ github.event.inputs.pushContainers }}" == "true" ]; then
              echo "push-containers=true" >> $GITHUB_OUTPUT
            else
              echo "push-containers=false" >> $GITHUB_OUTPUT
            fi
          else
            # Push to main = deploy to both environments with containers
            echo "deploy-development=true" >> $GITHUB_OUTPUT
            echo "deploy-production=true" >> $GITHUB_OUTPUT
            echo "skip-infrastructure=false" >> $GITHUB_OUTPUT
            echo "push-containers=true" >> $GITHUB_OUTPUT
          fi
          
          echo "🎯 Deployment Plan:"
          echo "   Deploy to Development: $([ '${{ github.event_name }}' == 'workflow_dispatch' ] && echo '${{ github.event.inputs.environment }}' | grep -q 'development\|both' && echo 'true' || echo 'false' || echo 'true')"
          echo "   Deploy to Production: $([ '${{ github.event_name }}' == 'workflow_dispatch' ] && echo '${{ github.event.inputs.environment }}' | grep -q 'production\|both' && echo 'true' || echo 'false' || echo 'true')"

  build-and-test:
    name: Build Code and Run Tests
    runs-on: ubuntu-latest
    needs: determine-environment
    outputs:
      api-image-tag: ${{ steps.images.outputs.api-image-tag }}
      api-gateway-image-tag: ${{ steps.images.outputs.api-gateway-image-tag }}
      frontend-image-tag: ${{ steps.images.outputs.frontend-image-tag }}
      jobs-image-tag: ${{ steps.images.outputs.jobs-image-tag }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up parallel build matrix
        id: matrix
        run: |
          echo "🚀 Setting up parallel build operations..."
          
      # Parallel .NET and Node.js setup
      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'
          
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '24'
          cache: 'npm'
          cache-dependency-path: src/Frontend/package-lock.json

      # Parallel dependency restoration
      - name: Restore dependencies in parallel
        run: |
          echo "📦 Restoring dependencies in parallel..."
          
          # Start .NET restore in background
          (cd src/Api && dotnet restore) &
          NET_PID=$!
          
          # Start Jobs restore in background
          (cd src/Jobs && dotnet restore) &
          JOBS_PID=$!
          
          # Start Frontend npm install in background
          (cd src/Frontend && npm ci) &
          NPM_PID=$!
          
          # Wait for all to complete and check exit codes
          wait $NET_PID
          NET_EXIT=$?
          wait $JOBS_PID
          JOBS_EXIT=$?
          wait $NPM_PID
          NPM_EXIT=$?
          
          if [ $NET_EXIT -ne 0 ] || [ $JOBS_EXIT -ne 0 ] || [ $NPM_EXIT -ne 0 ]; then
            echo "❌ One or more dependency restoration failed"
            exit 1
          fi
          
          echo "✅ All dependencies restored successfully"

      # Parallel builds and tests
      - name: Build and test in parallel
        run: |
          echo "🔨 Building and testing in parallel..."
          
          # API build and test in background
          (
            echo "🔨 Building API..."
            cd src/Api
            dotnet build --configuration Release --no-restore
            echo "🧪 Testing API..."
            cd ../Tests
            dotnet test --configuration Release --verbosity normal --logger trx --results-directory TestResults
          ) &
          API_PID=$!
          
          # Jobs build in background
          (
            echo "🔨 Building Jobs..."
            cd src/Jobs
            dotnet build --configuration Release --no-restore
          ) &
          JOBS_PID=$!
          
          # Frontend build in background
          (
            echo "🔨 Building Frontend..."
            cd src/Frontend
            npm run type-check
            npm run build
          ) &
          FRONTEND_PID=$!
          
          # Bicep validation in background
          (
            echo "💪 Validating Bicep templates..."
            az bicep build --file infra/bicep/main.bicep --stdout > /dev/null
            
            echo "🔍 Validating individual modules..."
            for module in infra/bicep/modules/*/main.bicep; do
              echo "  💪 Validating $module..."
              az bicep build --file "$module" --stdout > /dev/null
            done
            
            echo "✅ All Bicep templates validated successfully!"
          ) &
          BICEP_PID=$!
          
          # Wait for all builds and check exit codes
          wait $API_PID
          API_EXIT=$?
          wait $JOBS_PID
          JOBS_EXIT=$?
          wait $FRONTEND_PID
          FRONTEND_EXIT=$?
          wait $BICEP_PID
          BICEP_EXIT=$?
          
          if [ $API_EXIT -ne 0 ] || [ $JOBS_EXIT -ne 0 ] || [ $FRONTEND_EXIT -ne 0 ] || [ $BICEP_EXIT -ne 0 ]; then
            echo "❌ One or more builds failed"
            exit 1
          fi
          
          echo "✅ All builds completed successfully"

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Generate GHCR image tags
        id: images
        run: |
          BUILD_ID="${{ github.run_number }}"
          REGISTRY="ghcr.io/${{ github.repository_owner }}"
          
          API_TAG="${REGISTRY}/${{ env.API_IMAGE_NAME }}:${BUILD_ID}"
          API_GATEWAY_TAG="${REGISTRY}/${{ env.API_GATEWAY_IMAGE_NAME }}:${BUILD_ID}"
          FRONTEND_TAG="${REGISTRY}/${{ env.FRONTEND_IMAGE_NAME }}:${BUILD_ID}"
          JOBS_TAG="${REGISTRY}/${{ env.JOBS_IMAGE_NAME }}:${BUILD_ID}"
          
          echo "api-image-tag=${API_TAG}" >> $GITHUB_OUTPUT
          echo "api-gateway-image-tag=${API_GATEWAY_TAG}" >> $GITHUB_OUTPUT
          echo "frontend-image-tag=${FRONTEND_TAG}" >> $GITHUB_OUTPUT
          echo "jobs-image-tag=${JOBS_TAG}" >> $GITHUB_OUTPUT
          
          echo "🏷️ API Image: ${API_TAG}"
          echo "🏷️ API Gateway Image: ${API_GATEWAY_TAG}"
          echo "🏷️ Frontend Image: ${FRONTEND_TAG}"
          echo "🏷️ Jobs Image: ${JOBS_TAG}"

      # Parallel container builds
      - name: Build and push container images in parallel
        run: |
          echo "🐳 Building container images in parallel..."
          
          # Build API image in background
          docker buildx build \
            . \
            --file ./src/Api/Dockerfile \
            --push \
            --tag ${{ steps.images.outputs.api-image-tag }} \
            --cache-from type=gha,scope=api \
            --cache-to type=gha,mode=max,scope=api \
            --metadata-file /tmp/api-metadata.json &
          API_BUILD_PID=$!
          
          # Build API Gateway image in background
          docker buildx build \
            . \
            --file ./src/ApiGateway/Dockerfile \
            --push \
            --tag ${{ steps.images.outputs.api-gateway-image-tag }} \
            --cache-from type=gha,scope=api-gateway \
            --cache-to type=gha,mode=max,scope=api-gateway \
            --metadata-file /tmp/api-gateway-metadata.json &
          API_GATEWAY_BUILD_PID=$!
          
          # Build Frontend image in background (without build-time secrets)
          docker buildx build \
            . \
            --file ./src/Frontend/Dockerfile \
            --push \
            --tag ${{ steps.images.outputs.frontend-image-tag }} \
            --cache-from type=gha,scope=frontend \
            --cache-to type=gha,mode=max,scope=frontend \
            --metadata-file /tmp/frontend-metadata.json &
          FRONTEND_BUILD_PID=$!
          
          # Build Jobs image in background
          docker buildx build \
            . \
            --file ./src/Jobs/Dockerfile \
            --push \
            --tag ${{ steps.images.outputs.jobs-image-tag }} \
            --cache-from type=gha,scope=jobs \
            --cache-to type=gha,mode=max,scope=jobs \
            --metadata-file /tmp/jobs-metadata.json &
          JOBS_BUILD_PID=$!
          
          # Wait for all builds to complete
          wait $API_BUILD_PID
          API_BUILD_EXIT=$?
          wait $API_GATEWAY_BUILD_PID
          API_GATEWAY_BUILD_EXIT=$?
          wait $FRONTEND_BUILD_PID
          FRONTEND_BUILD_EXIT=$?
          wait $JOBS_BUILD_PID
          JOBS_BUILD_EXIT=$?
          
          if [ $API_BUILD_EXIT -ne 0 ] || [ $API_GATEWAY_BUILD_EXIT -ne 0 ] || [ $FRONTEND_BUILD_EXIT -ne 0 ] || [ $JOBS_BUILD_EXIT -ne 0 ]; then
            echo "❌ One or more container builds failed"
            exit 1
          fi
          
          echo "✅ All container images built and pushed successfully"

      # Security Scanning in parallel while deployments might be running
      - name: Run security scans in parallel
        continue-on-error: true
        run: |
          echo "🔒 Running security scans in parallel..."
          
          # Run Trivy scans in parallel
          trivy fs --format sarif --output api-trivy-results.sarif src/Api &
          API_SCAN_PID=$!
          
          trivy fs --format sarif --output frontend-trivy-results.sarif src/Frontend &
          FRONTEND_SCAN_PID=$!
          
          trivy fs --format sarif --output api-gateway-trivy-results.sarif src/ApiGateway &
          API_GATEWAY_SCAN_PID=$!
          
          trivy fs --format sarif --output jobs-trivy-results.sarif src/Jobs &
          JOBS_SCAN_PID=$!
          
          # Wait for scans to complete
          wait $API_SCAN_PID || echo "⚠️ API scan had issues"
          wait $FRONTEND_SCAN_PID || echo "⚠️ Frontend scan had issues"
          wait $API_GATEWAY_SCAN_PID || echo "⚠️ API Gateway scan had issues"  
          wait $JOBS_SCAN_PID || echo "⚠️ Jobs scan had issues"
          
          echo "✅ Security scans completed"

      - name: Upload security scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        continue-on-error: true
        with:
          sarif_file: |
            api-trivy-results.sarif
            frontend-trivy-results.sarif
            api-gateway-trivy-results.sarif
            jobs-trivy-results.sarif

      - name: Publish test results
        uses: dorny/test-reporter@v1
        if: always()
        with:
          name: API Tests
          path: src/Tests/TestResults/*.trx
          reporter: dotnet-trx

      - name: Publish build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts-${{ github.run_number }}
          path: |
            infra/
          retention-days: 30

      - name: Build summary
        run: |
          echo "✅ Code build and test completed successfully"
          echo "📦 Container images built and pushed to GHCR"
          echo "   API: ${{ steps.images.outputs.api-image-tag }}"
          echo "   API Gateway: ${{ steps.images.outputs.api-gateway-image-tag }}"
          echo "   Frontend: ${{ steps.images.outputs.frontend-image-tag }}"
          echo "   Jobs: ${{ steps.images.outputs.jobs-image-tag }}"

  # Deploy to Development Environment
  deploy-development:
    name: Deploy to Development
    needs: [determine-environment, build-and-test]
    if: always() && needs.build-and-test.result == 'success' && needs.determine-environment.outputs.deploy-development == 'true' && needs.determine-environment.outputs.push-containers == 'true'
    uses: ./.github/workflows/deploy-environment.yml
    with:
      environment: development
      api-image-tag: ${{ needs.build-and-test.outputs.api-image-tag }}
      api-gateway-image-tag: ${{ needs.build-and-test.outputs.api-gateway-image-tag }}
      frontend-image-tag: ${{ needs.build-and-test.outputs.frontend-image-tag }}
      jobs-image-tag: ${{ needs.build-and-test.outputs.jobs-image-tag }}
      skip-infrastructure: ${{ needs.determine-environment.outputs.skip-infrastructure == 'true' }}
    secrets: inherit

  # Deploy to Production Environment (requires development success + approval)
  deploy-production:
    name: Deploy to Production
    needs: [determine-environment, build-and-test, deploy-development]
    if: always() && needs.build-and-test.result == 'success' && needs.determine-environment.outputs.deploy-production == 'true' && needs.determine-environment.outputs.push-containers == 'true' && (needs.deploy-development.result == 'success' || needs.deploy-development.result == 'skipped')
    uses: ./.github/workflows/deploy-environment.yml
    with:
      environment: production
      api-image-tag: ${{ needs.build-and-test.outputs.api-image-tag }}
      api-gateway-image-tag: ${{ needs.build-and-test.outputs.api-gateway-image-tag }}
      frontend-image-tag: ${{ needs.build-and-test.outputs.frontend-image-tag }}
      jobs-image-tag: ${{ needs.build-and-test.outputs.jobs-image-tag }}
      skip-infrastructure: ${{ needs.determine-environment.outputs.skip-infrastructure == 'true' }}
    secrets: inherit

  # Deployment Summary
  deployment-summary:
    name: Deployment Summary
    runs-on: ubuntu-latest
    needs: [determine-environment, build-and-test, deploy-development, deploy-production]
    if: always() && needs.build-and-test.result == 'success'
    
    steps:
      - name: Generate deployment summary
        run: |
          echo "# 🚀 Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Build Status
          echo "## 📦 Build Status" >> $GITHUB_STEP_SUMMARY
          if [ "${{ needs.build-and-test.result }}" == "success" ]; then
            echo "✅ **Build and Test**: Successful" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Build and Test**: Failed" >> $GITHUB_STEP_SUMMARY
          fi
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Environment Deployments
          echo "## 🌍 Environment Deployments" >> $GITHUB_STEP_SUMMARY
          
          # Development Environment
          if [ "${{ needs.determine-environment.outputs.deploy-development }}" == "true" ]; then
            if [ "${{ needs.deploy-development.result }}" == "success" ]; then
              echo "✅ **Development**: Deployed successfully" >> $GITHUB_STEP_SUMMARY
              echo "   - Frontend: ${{ needs.deploy-development.outputs.frontend-url }}" >> $GITHUB_STEP_SUMMARY
              echo "   - API Gateway: ${{ needs.deploy-development.outputs.api-gateway-url }}" >> $GITHUB_STEP_SUMMARY
            elif [ "${{ needs.deploy-development.result }}" == "skipped" ]; then
              echo "⏭️ **Development**: Skipped" >> $GITHUB_STEP_SUMMARY
            else
              echo "❌ **Development**: Deployment failed" >> $GITHUB_STEP_SUMMARY
            fi
          else
            echo "⏭️ **Development**: Not requested" >> $GITHUB_STEP_SUMMARY
          fi
          
          # Production Environment
          if [ "${{ needs.determine-environment.outputs.deploy-production }}" == "true" ]; then
            if [ "${{ needs.deploy-production.result }}" == "success" ]; then
              echo "✅ **Production**: Deployed successfully" >> $GITHUB_STEP_SUMMARY
              echo "   - Frontend: ${{ needs.deploy-production.outputs.frontend-url }}" >> $GITHUB_STEP_SUMMARY
              echo "   - API Gateway: ${{ needs.deploy-production.outputs.api-gateway-url }}" >> $GITHUB_STEP_SUMMARY
            elif [ "${{ needs.deploy-production.result }}" == "skipped" ]; then
              echo "⏭️ **Production**: Skipped" >> $GITHUB_STEP_SUMMARY
            else
              echo "❌ **Production**: Deployment failed" >> $GITHUB_STEP_SUMMARY
            fi
          else
            echo "⏭️ **Production**: Not requested" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Container Images
          echo "## 🐳 Container Images Built" >> $GITHUB_STEP_SUMMARY
          echo "- **API**: \`${{ needs.build-and-test.outputs.api-image-tag }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- **API Gateway**: \`${{ needs.build-and-test.outputs.api-gateway-image-tag }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Frontend**: \`${{ needs.build-and-test.outputs.frontend-image-tag }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Jobs**: \`${{ needs.build-and-test.outputs.jobs-image-tag }}\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Next Steps
          echo "## 🎯 Next Steps" >> $GITHUB_STEP_SUMMARY
          if [ "${{ needs.deploy-development.result }}" == "success" ] && [ "${{ needs.determine-environment.outputs.deploy-production }}" == "false" ]; then
            echo "- ✅ Development deployment completed successfully" >> $GITHUB_STEP_SUMMARY
            echo "- 🚀 Ready for production deployment (run workflow with 'production' or 'both' environment)" >> $GITHUB_STEP_SUMMARY
          elif [ "${{ needs.deploy-production.result }}" == "success" ]; then
            echo "- ✅ Production deployment completed successfully" >> $GITHUB_STEP_SUMMARY
            echo "- 🎉 All environments are up to date!" >> $GITHUB_STEP_SUMMARY
          fi